diff --git a/doomgeneric/am_map.c b/doomgeneric/am_map.c
index d3d504e..18c4cae 100644
--- a/doomgeneric/am_map.c
+++ b/doomgeneric/am_map.c
@@ -141,7 +141,7 @@ typedef struct
 //   starting from the middle.
 //
 #define R ((8*PLAYERRADIUS)/7)
-mline_t player_arrow[] = {
+static const mline_t player_arrow[] = {
     { { -R+R/8, 0 }, { R, 0 } }, // -----
     { { R, 0 }, { R-R/2, R/4 } },  // ----->
     { { R, 0 }, { R-R/2, -R/4 } },
@@ -153,7 +153,7 @@ mline_t player_arrow[] = {
 #undef R
 
 #define R ((8*PLAYERRADIUS)/7)
-mline_t cheat_player_arrow[] = {
+static const mline_t cheat_player_arrow[] = {
     { { -R+R/8, 0 }, { R, 0 } }, // -----
     { { R, 0 }, { R-R/2, R/6 } },  // ----->
     { { R, 0 }, { R-R/2, -R/6 } },
@@ -174,15 +174,7 @@ mline_t cheat_player_arrow[] = {
 #undef R
 
 #define R (FRACUNIT)
-mline_t triangle_guy[] = {
-    { { (fixed_t)(-.867*R), (fixed_t)(-.5*R) }, { (fixed_t)(.867*R ), (fixed_t)(-.5*R) } },
-    { { (fixed_t)(.867*R ), (fixed_t)(-.5*R) }, { (fixed_t)(0      ), (fixed_t)(R    ) } },
-    { { (fixed_t)(0      ), (fixed_t)(R    ) }, { (fixed_t)(-.867*R), (fixed_t)(-.5*R) } }
-};
-#undef R
-
-#define R (FRACUNIT)
-mline_t thintriangle_guy[] = {
+static const mline_t thintriangle_guy[] = {
     { { (fixed_t)(-.5*R), (fixed_t)(-.7*R) }, { (fixed_t)(R    ), (fixed_t)(0    ) } },
     { { (fixed_t)(R    ), (fixed_t)(0    ) }, { (fixed_t)(-.5*R), (fixed_t)(.7*R ) } },
     { { (fixed_t)(-.5*R), (fixed_t)(.7*R ) }, { (fixed_t)(-.5*R), (fixed_t)(-.7*R) } }
@@ -192,14 +184,12 @@ mline_t thintriangle_guy[] = {
 
 
 
-static int 	cheating = 0;
-static int 	grid = 0;
-
-static int 	leveljuststarted = 1; 	// kluge until AM_LevelInit() is called
+static int 	cheating;
+static int 	grid;
 
-boolean    	automapactive = false;
-static int 	finit_width = SCREENWIDTH;
-static int 	finit_height = SCREENHEIGHT - 32;
+boolean    	automapactive;
+static const int 	finit_width = SCREENWIDTH;
+static const int 	finit_height = SCREENHEIGHT - 32;
 
 // location of window on screen
 static int 	f_x;
@@ -251,7 +241,7 @@ static fixed_t old_m_x, old_m_y;
 static mpoint_t f_oldloc;
 
 // used by MTOF to scale from map-to-frame-buffer coords
-static fixed_t scale_mtof = (fixed_t)INITSCALEMTOF;
+static fixed_t scale_mtof;
 // used by FTOM to scale from frame-buffer-to-map coords (=1/scale_mtof)
 static fixed_t scale_ftom;
 
@@ -259,13 +249,11 @@ static player_t *plr; // the player represented by an arrow
 
 static patch_t *marknums[10]; // numbers used for marking by the automap
 static mpoint_t markpoints[AM_NUMMARKPOINTS]; // where the points are
-static int markpointnum = 0; // next point to be assigned
+static int markpointnum; // next point to be assigned
 
-static int followplayer = 1; // specifies whether to follow the player around
+static int followplayer; // specifies whether to follow the player around
 
-cheatseq_t cheat_amap = CHEAT("iddt", 0);
-
-static boolean stopped = true;
+const cheatseq_t cheat_amap = CHEAT("iddt", 0);
 
 // Calculates the slope and slope according to the x-axis of a line
 // segment in map coordinates (with the upright y-axis n' all) so
@@ -424,7 +412,7 @@ void AM_changeWindowLoc(void)
 void AM_initVariables(void)
 {
     int pnum;
-    static event_t st_notify = { ev_keyup, AM_MSGENTERED, 0, 0 };
+    static const event_t st_notify = { ev_keyup, AM_MSGENTERED, 0, 0 };
 
     automapactive = true;
     fb = I_VideoBuffer;
@@ -470,7 +458,7 @@ void AM_initVariables(void)
     old_m_h = m_h;
 
     // inform the status bar of the change
-    ST_Responder(&st_notify);
+    ST_Responder((event_t *)&st_notify);
 
 }
 
@@ -517,8 +505,6 @@ void AM_clearMarks(void)
 //
 void AM_LevelInit(void)
 {
-    leveljuststarted = 0;
-
     f_x = f_y = 0;
     f_w = finit_width;
     f_h = finit_height;
@@ -540,12 +526,11 @@ void AM_LevelInit(void)
 //
 void AM_Stop (void)
 {
-    static event_t st_notify = { 0, ev_keyup, AM_MSGEXITED, 0 };
+    static const event_t st_notify = { 0, ev_keyup, AM_MSGEXITED, 0 };
 
     AM_unloadPics();
     automapactive = false;
-    ST_Responder(&st_notify);
-    stopped = true;
+    ST_Responder((event_t *)&st_notify);
 }
 
 //
@@ -553,10 +538,15 @@ void AM_Stop (void)
 //
 void AM_Start (void)
 {
-    static int lastlevel = -1, lastepisode = -1;
+	static int hasrun;
+    static int lastlevel, lastepisode;
+	if (!hasrun) {
+		hasrun = 1;
+		lastlevel = -1;
+		lastepisode = -1;
+	}
 
-    if (!stopped) AM_Stop();
-    stopped = false;
+    if (automapactive) AM_Stop();
     if (lastlevel != gamemap || lastepisode != gameepisode)
     {
 	AM_LevelInit();
@@ -697,7 +687,7 @@ AM_Responder
             rc = false;
         }
 
-	if (!deathmatch && cht_CheckCheat(&cheat_amap, ev->data2))
+	if (!deathmatch && cht_CheckCheat((cheatseq_t *)&cheat_amap, ev->data2))
 	{
 	    rc = false;
 	    cheating = (cheating+1) % 3;
@@ -995,15 +985,12 @@ AM_drawFline
     register int ay;
     register int d;
     
-    static int fuck = 0;
-
     // For debugging only
     if (      fl->a.x < 0 || fl->a.x >= f_w
 	   || fl->a.y < 0 || fl->a.y >= f_h
 	   || fl->b.x < 0 || fl->b.x >= f_w
 	   || fl->b.y < 0 || fl->b.y >= f_h)
     {
-        DEH_fprintf(stderr, "fuck %d \r", fuck++);
 	return;
     }
 
@@ -1255,11 +1242,11 @@ void AM_drawPlayers(void)
     {
 	if (cheating)
 	    AM_drawLineCharacter
-		(cheat_player_arrow, arrlen(cheat_player_arrow), 0,
+		((mline_t *)cheat_player_arrow, arrlen(cheat_player_arrow), 0,
 		 plr->mo->angle, WHITE, plr->mo->x, plr->mo->y);
 	else
 	    AM_drawLineCharacter
-		(player_arrow, arrlen(player_arrow), 0, plr->mo->angle,
+		((mline_t *)player_arrow, arrlen(player_arrow), 0, plr->mo->angle,
 		 WHITE, plr->mo->x, plr->mo->y);
 	return;
     }
@@ -1281,7 +1268,7 @@ void AM_drawPlayers(void)
 	    color = their_colors[their_color];
 	
 	AM_drawLineCharacter
-	    (player_arrow, arrlen(player_arrow), 0, p->mo->angle,
+	    ((mline_t *)player_arrow, arrlen(player_arrow), 0, p->mo->angle,
 	     color, p->mo->x, p->mo->y);
     }
 
@@ -1301,7 +1288,7 @@ AM_drawThings
 	while (t)
 	{
 	    AM_drawLineCharacter
-		(thintriangle_guy, arrlen(thintriangle_guy),
+		((mline_t *)thintriangle_guy, arrlen(thintriangle_guy),
 		 16<<FRACBITS, t->angle, colors+lightlev, t->x, t->y);
 	    t = t->snext;
 	}
diff --git a/doomgeneric/am_map.h b/doomgeneric/am_map.h
index 572d238..4063a01 100644
--- a/doomgeneric/am_map.h
+++ b/doomgeneric/am_map.h
@@ -43,7 +43,4 @@ void AM_Drawer (void);
 void AM_Stop (void);
 
 
-extern cheatseq_t cheat_amap;
-
-
 #endif
diff --git a/doomgeneric/d_items.c b/doomgeneric/d_items.c
index 33f310c..65c0c55 100644
--- a/doomgeneric/d_items.c
+++ b/doomgeneric/d_items.c
@@ -34,7 +34,7 @@
 // atkstate, i.e. attack/fire/hit frame
 // flashstate, muzzle flash
 //
-weaponinfo_t	weaponinfo[NUMWEAPONS] =
+const weaponinfo_t	weaponinfo[NUMWEAPONS] =
 {
     {
 	// fist
diff --git a/doomgeneric/d_items.h b/doomgeneric/d_items.h
index 3d22a06..b60caf6 100644
--- a/doomgeneric/d_items.h
+++ b/doomgeneric/d_items.h
@@ -36,6 +36,6 @@ typedef struct
 
 } weaponinfo_t;
 
-extern  weaponinfo_t    weaponinfo[NUMWEAPONS];
+extern  const weaponinfo_t    weaponinfo[NUMWEAPONS];
 
 #endif
diff --git a/doomgeneric/d_loop.c b/doomgeneric/d_loop.c
index 1939dbd..58563d6 100644
--- a/doomgeneric/d_loop.c
+++ b/doomgeneric/d_loop.c
@@ -74,7 +74,7 @@ int gametic;
 // When set to true, a single tic is run each time TryRunTics() is called.
 // This is used for -timedemo mode.
 
-boolean singletics = false;
+boolean singletics;
 
 // Index of the local player.
 
@@ -82,7 +82,7 @@ static int localplayer;
 
 // Used for original sync code.
 
-static int      skiptics = 0;
+static int      skiptics;
 
 // Reduce the bandwidth needed by sampling game input less and transmitting
 // less.  If ticdup is 2, sample half normal, 3 = one third normal, etc.
@@ -95,11 +95,11 @@ fixed_t         offsetms;
 
 // Use new client syncronisation code
 
-static boolean  new_sync = true;
+static boolean  new_sync;
 
 // Callback functions for loop code.
 
-static loop_interface_t *loop_interface = NULL;
+static loop_interface_t *loop_interface;
 
 // Current players in the multiplayer game.
 // This is distinct from playeringame[] used by the game code, which may
diff --git a/doomgeneric/d_main.c b/doomgeneric/d_main.c
index c7cf977..ba4c900 100644
--- a/doomgeneric/d_main.c
+++ b/doomgeneric/d_main.c
@@ -120,12 +120,12 @@ boolean         storedemo;
 boolean         bfgedition;
 
 // If true, the main game loop has started.
-boolean         main_loop_started = false;
+boolean         main_loop_started;
 
 char		wadfile[1024];		// primary wad file
 char		mapdir[1024];           // directory of development maps
 
-int             show_endoom = 1;
+int             show_endoom;
 
 
 void D_ConnectNetGame(void);
@@ -161,18 +161,19 @@ void D_ProcessEvents (void)
 //
 
 // wipegamestate can be set to -1 to force a wipe on the next draw
-gamestate_t     wipegamestate = GS_DEMOSCREEN;
+gamestate_t     wipegamestate;
 extern  boolean setsizeneeded;
 extern  int             showMessages;
 void R_ExecuteSetViewSize (void);
 
 void D_Display (void)
 {
-    static  boolean		viewactivestate = false;
-    static  boolean		menuactivestate = false;
-    static  boolean		inhelpscreensstate = false;
-    static  boolean		fullscreen = false;
-    static  gamestate_t		oldgamestate = -1;
+	static  boolean		hasrun;
+    static  boolean		viewactivestate;
+    static  boolean		menuactivestate;
+    static  boolean		inhelpscreensstate;
+    static  boolean		fullscreen;
+    static  gamestate_t		oldgamestate;
     static  int			borderdrawcount;
     int				nowtime;
     int				tics;
@@ -182,6 +183,14 @@ void D_Display (void)
     boolean			wipe;
     boolean			redrawsbar;
 
+	if (!hasrun) {
+		hasrun = true;
+		viewactivestate = false;
+		menuactivestate = false;
+		inhelpscreensstate = false;
+		fullscreen = false;
+		oldgamestate = -1;
+	}
     if (nodrawers)
     	return;                    // for comparative timing / profiling
 		
@@ -364,8 +373,8 @@ void D_BindVariables(void)
     M_BindVariable("screenblocks",           &screenblocks);
     M_BindVariable("detaillevel",            &detailLevel);
     M_BindVariable("snd_channels",           &snd_channels);
-    M_BindVariable("vanilla_savegame_limit", &vanilla_savegame_limit);
-    M_BindVariable("vanilla_demo_limit",     &vanilla_demo_limit);
+//TODO:PAA    M_BindVariable("vanilla_savegame_limit", &vanilla_savegame_limit);
+//TODO:PAA    M_BindVariable("vanilla_demo_limit",     &vanilla_demo_limit);
     M_BindVariable("show_endoom",            &show_endoom);
 
     // Multiplayer chat macros
@@ -375,7 +384,7 @@ void D_BindVariables(void)
         char buf[12];
 
         M_snprintf(buf, sizeof(buf), "chatmacro%i", i);
-        M_BindVariable(buf, &chat_macros[i]);
+//TODO:PAA        M_BindVariable(buf, &chat_macros[i]);
     }
 }
 
@@ -601,7 +610,7 @@ void D_StartTitle (void)
 // These are from the original source: some of them are perhaps
 // not used in any dehacked patches
 
-static char *banners[] =
+static const char * const banners[] =
 {
     // doom2.wad
     "                         "
@@ -647,7 +656,7 @@ static char *GetGameName(char *gamename)
     {
         // Has the banner been replaced?
 
-        deh_sub = DEH_String(banners[i]);
+        deh_sub = DEH_String((char *)banners[i]);
         
         if (deh_sub != banners[i])
         {
@@ -686,7 +695,7 @@ static void SetMissionForPackName(char *pack_name)
     int i;
     static const struct
     {
-        char *name;
+        const char *name;
         int mission;
     } packs[] = {
         { "doom2",    doom2 },
@@ -877,7 +886,7 @@ static boolean D_AddFile(char *filename)
 // Some dehacked mods replace these.  These are only displayed if they are 
 // replaced by dehacked.
 
-static char *copyright_banners[] =
+static const char * const copyright_banners[] =
 {
     "===========================================================================\n"
     "ATTENTION:  This version of DOOM has been modified.  If you would like to\n"
@@ -906,7 +915,7 @@ void PrintDehackedBanners(void)
     {
         char *deh_s;
 
-        deh_s = DEH_String(copyright_banners[i]);
+        deh_s = DEH_String((char *)copyright_banners[i]);
 
         if (deh_s != copyright_banners[i])
         {
@@ -923,11 +932,11 @@ void PrintDehackedBanners(void)
     }
 }
 
-static struct 
+static const struct 
 {
-    char *description;
-    char *cmdline;
-    GameVersion_t version;
+    const char *description;
+    const char *cmdline;
+    const GameVersion_t version;
 } gameversions[] = {
     {"Doom 1.666",           "1.666",      exe_doom_1_666},
     {"Doom 1.7/1.7a",        "1.7",        exe_doom_1_7},
@@ -1167,6 +1176,7 @@ void D_DoomMain (void)
     int numiwadlumps;
 #endif
 
+    D_initDoomstate();
     I_AtExit(D_Endoom, false);
 
     // print banner
@@ -1353,6 +1363,7 @@ void D_DoomMain (void)
 
     // Load configuration files before initialising other subsystems.
     DEH_printf("M_LoadDefaults: Load system defaults.\n");
+    M_InitConfig();
     M_SetConfigFilenames("default.cfg", PROGRAM_PREFIX "doom.cfg");
     D_BindVariables();
     M_LoadDefaults();
@@ -1778,6 +1789,9 @@ void D_DoomMain (void)
     DEH_printf("ST_Init: Init status bar.\n");
     ST_Init ();
 
+    DEH_printf("G_Init: Init game logic.\n");
+    G_Init ();
+
     // If Doom II without a MAP01 lump, this is a store demo.
     // Moved this here so that MAP01 isn't constantly looked up
     // in the main loop.
diff --git a/doomgeneric/d_net.c b/doomgeneric/d_net.c
index b8962cc..078d8f0 100644
--- a/doomgeneric/d_net.c
+++ b/doomgeneric/d_net.c
@@ -94,7 +94,7 @@ static void RunTic(ticcmd_t *cmds, boolean *ingame)
     G_Ticker ();
 }
 
-static loop_interface_t doom_loop_interface = {
+static const loop_interface_t doom_loop_interface = {
     D_ProcessEvents,
     G_BuildTiccmd,
     RunTic,
@@ -246,7 +246,7 @@ void D_CheckNetGame (void)
         autostart = true;
     }
 
-    D_RegisterLoopCallbacks(&doom_loop_interface);
+    D_RegisterLoopCallbacks((loop_interface_t *)&doom_loop_interface);
 
     SaveGameSettings(&settings);
     D_StartNetGame(&settings, NULL);
diff --git a/doomgeneric/doomdef.h b/doomgeneric/doomdef.h
index 62d729d..8f4b3bc 100644
--- a/doomgeneric/doomdef.h
+++ b/doomgeneric/doomdef.h
@@ -49,10 +49,10 @@
 // the game final animation, or a demo. 
 typedef enum
 {
+    GS_DEMOSCREEN,
     GS_LEVEL,
     GS_INTERMISSION,
     GS_FINALE,
-    GS_DEMOSCREEN,
 } gamestate_t;
 
 typedef enum
diff --git a/doomgeneric/doomstat.c b/doomgeneric/doomstat.c
index ed4c6cc..78fe6bb 100644
--- a/doomgeneric/doomstat.c
+++ b/doomgeneric/doomstat.c
@@ -22,14 +22,16 @@
 
 
 // Game Mode - identify IWAD as shareware, retail etc.
-GameMode_t gamemode = indetermined;
-GameMission_t	gamemission = doom;
-GameVersion_t   gameversion = exe_final2;
+GameMode_t gamemode;
+GameMission_t	gamemission;
+GameVersion_t   gameversion;
 char *gamedescription;
 
 // Set if homebrew PWAD stuff has been added.
 boolean	modifiedgame;
 
-
-
-
+void D_initDoomstate(void) {
+	gamemode = indetermined;
+	gamemission = doom;
+	gameversion = exe_final2;
+}
diff --git a/doomgeneric/doomstat.h b/doomgeneric/doomstat.h
index acd65dc..ed68cc5 100644
--- a/doomgeneric/doomstat.h
+++ b/doomgeneric/doomstat.h
@@ -277,5 +277,5 @@ extern	int		rndindex;
 
 extern  ticcmd_t       *netcmds;
 
-
+extern void D_initDoomstate(void);
 #endif
diff --git a/doomgeneric/dstrings.c b/doomgeneric/dstrings.c
index b87f198..56d124d 100644
--- a/doomgeneric/dstrings.c
+++ b/doomgeneric/dstrings.c
@@ -20,7 +20,7 @@
 
 #include "dstrings.h"
 
-char *doom1_endmsg[] =
+const char *const doom1_endmsg[] =
 {
   "are you sure you want to\nquit this great game?",
   "please don't leave, there's more\ndemons to toast!",
@@ -32,7 +32,7 @@ char *doom1_endmsg[] =
   "go ahead and leave. see if i care.",
 };
 
-char *doom2_endmsg[] =
+const char *const doom2_endmsg[] =
 {
   // QuitDOOM II messages
   "are you sure you want to\nquit this great game?",
diff --git a/doomgeneric/dstrings.h b/doomgeneric/dstrings.h
index d3240b4..1202137 100644
--- a/doomgeneric/dstrings.h
+++ b/doomgeneric/dstrings.h
@@ -34,8 +34,8 @@
 // 8 per each game type
 #define NUM_QUITMESSAGES   8
 
-extern char *doom1_endmsg[];
-extern char *doom2_endmsg[];
+extern const char *const doom1_endmsg[];
+extern const char *const doom2_endmsg[];
 
 
 #endif
diff --git a/doomgeneric/f_finale.c b/doomgeneric/f_finale.c
index ca6775e..65de944 100644
--- a/doomgeneric/f_finale.c
+++ b/doomgeneric/f_finale.c
@@ -61,11 +61,11 @@ typedef struct
 {
     GameMission_t mission;
     int episode, level;
-    char *background;
-    char *text;
+    const char *background;
+    const char *text;
 } textscreen_t;
 
-static textscreen_t textscreens[] =
+static const textscreen_t textscreens[] =
 {
     { doom,      1, 8,  "FLOOR4_8",  E1TEXT},
     { doom,      2, 8,  "SFLR6_1",   E2TEXT},
@@ -127,7 +127,7 @@ void F_StartFinale (void)
 
     for (i=0; i<arrlen(textscreens); ++i)
     {
-        textscreen_t *screen = &textscreens[i];
+        textscreen_t *screen = (textscreen_t *)&textscreens[i];
 
         // Hack for Chex Quest
 
@@ -140,8 +140,8 @@ void F_StartFinale (void)
          && (logical_gamemission != doom || gameepisode == screen->episode)
          && gamemap == screen->level)
         {
-            finaletext = screen->text;
-            finaleflat = screen->background;
+            finaletext = (char *)screen->text;
+            finaleflat = (char *)screen->background;
         }
     }
 
@@ -303,7 +303,7 @@ typedef struct
     mobjtype_t	type;
 } castinfo_t;
 
-castinfo_t	castorder[] = {
+const castinfo_t	castorder[] = {
     {CC_ZOMBIE, MT_POSSESSED},
     {CC_SHOTGUN, MT_SHOTGUY},
     {CC_HEAVY, MT_CHAINGUY},
@@ -341,7 +341,7 @@ void F_StartCast (void)
 {
     wipegamestate = -1;		// force a screen wipe
     castnum = 0;
-    caststate = &states[mobjinfo[castorder[castnum].type].seestate];
+    caststate = (state_t *)&states[mobjinfo[castorder[castnum].type].seestate];
     casttics = caststate->tics;
     castdeath = false;
     finalestage = F_STAGE_CAST;
@@ -372,7 +372,7 @@ void F_CastTicker (void)
 	    castnum = 0;
 	if (mobjinfo[castorder[castnum].type].seesound)
 	    S_StartSound (NULL, mobjinfo[castorder[castnum].type].seesound);
-	caststate = &states[mobjinfo[castorder[castnum].type].seestate];
+	caststate = (state_t *)&states[mobjinfo[castorder[castnum].type].seestate];
 	castframes = 0;
     }
     else
@@ -381,7 +381,7 @@ void F_CastTicker (void)
 	if (caststate == &states[S_PLAY_ATK1])
 	    goto stopattack;	// Oh, gross hack!
 	st = caststate->nextstate;
-	caststate = &states[st];
+	caststate = (state_t *)&states[st];
 	castframes++;
 	
 	// sound hacks....
@@ -425,30 +425,30 @@ void F_CastTicker (void)
 	// go into attack frame
 	castattacking = true;
 	if (castonmelee)
-	    caststate=&states[mobjinfo[castorder[castnum].type].meleestate];
+	    caststate=(state_t *)&states[mobjinfo[castorder[castnum].type].meleestate];
 	else
-	    caststate=&states[mobjinfo[castorder[castnum].type].missilestate];
+	    caststate=(state_t *)&states[mobjinfo[castorder[castnum].type].missilestate];
 	castonmelee ^= 1;
 	if (caststate == &states[S_NULL])
 	{
 	    if (castonmelee)
 		caststate=
-		    &states[mobjinfo[castorder[castnum].type].meleestate];
+		    (state_t *)&states[mobjinfo[castorder[castnum].type].meleestate];
 	    else
 		caststate=
-		    &states[mobjinfo[castorder[castnum].type].missilestate];
+		    (state_t *)&states[mobjinfo[castorder[castnum].type].missilestate];
 	}
     }
 	
     if (castattacking)
     {
 	if (castframes == 24
-	    ||	caststate == &states[mobjinfo[castorder[castnum].type].seestate] )
+	    ||	caststate == (state_t *)&states[mobjinfo[castorder[castnum].type].seestate] )
 	{
 	  stopattack:
 	    castattacking = false;
 	    castframes = 0;
-	    caststate = &states[mobjinfo[castorder[castnum].type].seestate];
+	    caststate = (state_t *)&states[mobjinfo[castorder[castnum].type].seestate];
 	}
     }
 	
@@ -472,7 +472,7 @@ boolean F_CastResponder (event_t* ev)
 		
     // go into death frame
     castdeath = true;
-    caststate = &states[mobjinfo[castorder[castnum].type].deathstate];
+    caststate = (state_t *)&states[mobjinfo[castorder[castnum].type].deathstate];
     casttics = caststate->tics;
     castframes = 0;
     castattacking = false;
diff --git a/doomgeneric/g_game.c b/doomgeneric/g_game.c
index 9954d78..f550384 100644
--- a/doomgeneric/g_game.c
+++ b/doomgeneric/g_game.c
@@ -138,9 +138,9 @@ byte*		demo_p;
 byte*		demoend; 
 boolean         singledemo;            	// quit after playing a demo from cmdline 
  
-boolean         precache = true;        // if true, load all graphics at start 
+boolean         precache;        // if true, load all graphics at start 
 
-boolean         testcontrols = false;    // Invoked by setup to test controls
+boolean         testcontrols;    // Invoked by setup to test controls
 int             testcontrols_mousespeed;
  
 
@@ -153,11 +153,11 @@ byte		consistancy[MAXPLAYERS][BACKUPTICS];
  
 #define TURBOTHRESHOLD	0x32
 
-fixed_t         forwardmove[2] = {0x19, 0x32}; 
-fixed_t         sidemove[2] = {0x18, 0x28}; 
-fixed_t         angleturn[3] = {640, 1280, 320};    // + slow turn 
+const fixed_t         forwardmove[2] = {0x19, 0x32}; 
+const fixed_t         sidemove[2] = {0x18, 0x28}; 
+const fixed_t         angleturn[3] = {640, 1280, 320};    // + slow turn 
 
-static int *weapon_keys[] = {
+static const int *weapon_keys[] = {
     &key_weapon1,
     &key_weapon2,
     &key_weapon3,
@@ -170,7 +170,7 @@ static int *weapon_keys[] = {
 
 // Set to -1 or +1 to switch to the previous or next weapon.
 
-static int next_weapon = 0;
+static int next_weapon;
 
 // Used for prev/next weapon keys.
 
@@ -199,7 +199,7 @@ static boolean  gamekeydown[NUMKEYS];
 static int      turnheld;		// for accelerative turning 
  
 static boolean  mousearray[MAX_MOUSE_BUTTONS + 1];
-static boolean *mousebuttons = &mousearray[1];  // allow [-1]
+static boolean *mousebuttons;
 
 // mouse values are used once 
 int             mousex;
@@ -217,7 +217,7 @@ static int      joyxmove;
 static int      joyymove;
 static int      joystrafemove;
 static boolean  joyarray[MAX_JOY_BUTTONS + 1]; 
-static boolean *joybuttons = &joyarray[1];		// allow [-1] 
+static boolean *joybuttons;
  
 static int      savegameslot; 
 static char     savedescription[32]; 
@@ -227,8 +227,8 @@ static char     savedescription[32];
 mobj_t*		bodyque[BODYQUESIZE]; 
 int		bodyqueslot; 
  
-int             vanilla_savegame_limit = 1;
-int             vanilla_demo_limit = 1;
+const int             vanilla_savegame_limit = 1;
+const int             vanilla_demo_limit = 1;
  
 int G_CmdChecksum (ticcmd_t* cmd) 
 { 
@@ -367,12 +367,10 @@ void G_BuildTiccmd (ticcmd_t* cmd, int maketic)
     { 
 	if (gamekeydown[key_right]) 
 	{
-	    // fprintf(stderr, "strafe right\n");
 	    side += sidemove[speed]; 
 	}
 	if (gamekeydown[key_left]) 
 	{
-	    //	fprintf(stderr, "strafe left\n");
 	    side -= sidemove[speed]; 
 	}
 	if (joyxmove > 0) 
@@ -395,12 +393,10 @@ void G_BuildTiccmd (ticcmd_t* cmd, int maketic)
  
     if (gamekeydown[key_up]) 
     {
-	// fprintf(stderr, "up\n");
 	forward += forwardmove[speed]; 
     }
     if (gamekeydown[key_down]) 
     {
-	// fprintf(stderr, "down\n");
 	forward -= forwardmove[speed]; 
     }
 
@@ -579,7 +575,7 @@ void G_BuildTiccmd (ticcmd_t* cmd, int maketic)
 
     if (lowres_turn)
     {
-        static signed short carry = 0;
+        static signed short carry;
         signed short desired_angleturn;
 
         desired_angleturn = cmd->angleturn + carry;
@@ -1301,7 +1297,7 @@ void G_ScreenShot (void)
 
 
 // DOOM Par Times
-int pars[4][10] = 
+int const pars[4][10] = 
 { 
     {0}, 
     {0,30,75,120,90,165,180,180,30,165}, 
@@ -1310,7 +1306,7 @@ int pars[4][10] =
 }; 
 
 // DOOM II Par Times
-int cpars[32] =
+int const cpars[32] =
 {
     30,90,120,120,90,150,120,120,270,90,	//  1-10
     210,150,150,150,210,150,420,150,210,150,	// 11-20
@@ -1723,6 +1719,12 @@ void G_DoNewGame (void)
 } 
 
 
+void G_Init(void)
+{
+	mousebuttons = &mousearray[1];  // allow [-1]
+	joybuttons = &joyarray[1];		// allow [-1] 
+}
+
 void
 G_InitNew
 ( skill_t	skill,
@@ -1809,6 +1811,8 @@ G_InitNew
     else
 	respawnmonsters = false;
 
+#if 0
+	//TODO:PAA nightmare mode
     if (fastparm || (skill == sk_nightmare && gameskill != sk_nightmare) )
     {
 	for (i=S_SARG_RUN1 ; i<=S_SARG_PAIN2 ; i++)
@@ -1825,7 +1829,7 @@ G_InitNew
 	mobjinfo[MT_HEADSHOT].speed = 10*FRACUNIT;
 	mobjinfo[MT_TROOPSHOT].speed = 10*FRACUNIT;
     }
-
+#endif
     // force players to be initialized upon first level load
     for (i=0 ; i<MAXPLAYERS ; i++)
 	players[i].playerstate = PST_REBORN;
diff --git a/doomgeneric/g_game.h b/doomgeneric/g_game.h
index da0df39..2258c05 100644
--- a/doomgeneric/g_game.h
+++ b/doomgeneric/g_game.h
@@ -29,7 +29,7 @@
 // GAME
 //
 void G_DeathMatchSpawnPlayer (int playernum);
-
+void G_Init(void);
 void G_InitNew (skill_t skill, int episode, int map);
 
 // Can be called by the startup code or M_Responder.
@@ -74,7 +74,7 @@ void G_ScreenShot (void);
 void G_DrawMouseSpeedBox(void);
 int G_VanillaVersionCode(void);
 
-extern int vanilla_savegame_limit;
-extern int vanilla_demo_limit;
+extern const int vanilla_savegame_limit;
+extern const int vanilla_demo_limit;
 #endif
 
diff --git a/doomgeneric/hu_stuff.c b/doomgeneric/hu_stuff.c
index b63cac7..c7af8cd 100644
--- a/doomgeneric/hu_stuff.c
+++ b/doomgeneric/hu_stuff.c
@@ -61,7 +61,7 @@
 
 
 
-char *chat_macros[10] =
+const char * const chat_macros[10] =
 {
     HUSTR_CHATMACRO0,
     HUSTR_CHATMACRO1,
@@ -75,7 +75,7 @@ char *chat_macros[10] =
     HUSTR_CHATMACRO9
 };
 
-char*	player_names[] =
+const char*	const player_names[] =
 {
     HUSTR_PLRGREEN,
     HUSTR_PLRINDIGO,
@@ -89,7 +89,7 @@ patch_t*		hu_font[HU_FONTSIZE];
 static hu_textline_t	w_title;
 boolean			chat_on;
 static hu_itext_t	w_chat;
-static boolean		always_off = false;
+static boolean		always_off;
 static char		chat_dest[MAXPLAYERS];
 static hu_itext_t w_inputbuffer[MAXPLAYERS];
 
@@ -102,14 +102,14 @@ static int		message_counter;
 
 extern int		showMessages;
 
-static boolean		headsupactive = false;
+static boolean		headsupactive;
 
 //
 // Builtin map names.
 // The actual names can be found in DStrings.h.
 //
 
-char*	mapnames[] =	// DOOM shareware/registered/retail (Ultimate) names.
+const char * const mapnames[] =	// DOOM shareware/registered/retail (Ultimate) names.
 {
 
     HUSTR_E1M1,
@@ -169,7 +169,7 @@ char*	mapnames[] =	// DOOM shareware/registered/retail (Ultimate) names.
 // the layout in the Vanilla executable, where it is possible to
 // overflow the end of one array into the next.
 
-char *mapnames_commercial[] =
+const char * const mapnames_commercial[] =
 {
     // DOOM 2 map names.
 
@@ -335,16 +335,16 @@ void HU_Start(void)
     switch ( logical_gamemission )
     {
       case doom:
-	s = HU_TITLE;
+	s = (char *)HU_TITLE;
 	break;
       case doom2:
-	 s = HU_TITLE2;
+	 s = (char *)HU_TITLE2;
 	 break;
       case pack_plut:
-	s = HU_TITLEP;
+	s = (char *)HU_TITLEP;
 	break;
       case pack_tnt:
-	s = HU_TITLET;
+	s = (char *)HU_TITLET;
 	break;
       default:
          s = "Unknown level";
@@ -356,7 +356,7 @@ void HU_Start(void)
 
     if (gameversion == exe_chex)
     {
-        s = HU_TITLE_CHEX;
+        s = (char *)HU_TITLE_CHEX;
     }
 
     // dehacked substitution to get modified level name
@@ -451,7 +451,7 @@ void HU_Ticker(void)
 				|| chat_dest[i] == HU_BROADCAST))
 			{
 			    HUlib_addMessageToSText(&w_message,
-						    DEH_String(player_names[i]),
+						    DEH_String((char *)player_names[i]),
 						    w_inputbuffer[i].l.l);
 			    
 			    message_nottobefuckedwith = true;
@@ -475,8 +475,8 @@ void HU_Ticker(void)
 #define QUEUESIZE		128
 
 static char	chatchars[QUEUESIZE];
-static int	head = 0;
-static int	tail = 0;
+static int	head;
+static int	tail;
 
 
 void HU_queueChatChar(char c)
@@ -515,12 +515,12 @@ boolean HU_Responder(event_t *ev)
     static char		lastmessage[HU_MAXLINELENGTH+1];
     char*		macromessage;
     boolean		eatkey = false;
-    static boolean	altdown = false;
+    static boolean	altdown;
     unsigned char 	c;
     int			i;
     int			numplayers;
     
-    static int		num_nobrainers = 0;
+    static int		num_nobrainers;
 
     numplayers = 0;
     for (i=0 ; i<MAXPLAYERS ; i++)
@@ -592,8 +592,7 @@ boolean HU_Responder(event_t *ev)
 	    c = ev->data1 - '0';
 	    if (c > 9)
 		return false;
-	    // fprintf(stderr, "got here\n");
-	    macromessage = chat_macros[c];
+	    macromessage = (char *)chat_macros[c];
 	    
 	    // kill last message with a '\n'
 	    HU_queueChatChar(KEY_ENTER); // DEBUG!!!
diff --git a/doomgeneric/hu_stuff.h b/doomgeneric/hu_stuff.h
index a3affc5..72a0d9e 100644
--- a/doomgeneric/hu_stuff.h
+++ b/doomgeneric/hu_stuff.h
@@ -53,7 +53,7 @@ void HU_Drawer(void);
 char HU_dequeueChatChar(void);
 void HU_Erase(void);
 
-extern char *chat_macros[10];
+extern const char * const chat_macros[10];
 
 #endif
 
diff --git a/doomgeneric/i_cdmus.c b/doomgeneric/i_cdmus.c
index 6a9a9a6..784ed71 100644
--- a/doomgeneric/i_cdmus.c
+++ b/doomgeneric/i_cdmus.c
@@ -99,7 +99,7 @@ void I_CDMusPrintStartup(void)
 
     if (startup_error != NULL)
     {
-        fprintf(stderr, "I_CDMusInit: %s\n", startup_error);
+        printf("I_CDMusInit: %s\n", startup_error);
     }
 #endif
 }
diff --git a/doomgeneric/i_input.c b/doomgeneric/i_input.c
index 7ec4b63..dbd8dcc 100644
--- a/doomgeneric/i_input.c
+++ b/doomgeneric/i_input.c
@@ -41,13 +41,14 @@
 
 #include "doomgeneric.h"
 
-int vanilla_keyboard_mapping = 1;
+int vanilla_keyboard_mapping;
 
 // Is the shift key currently down?
 
 static int shiftdown = 0;
 
 // Lookup table for mapping AT keycodes to their doom keycode
+#if 0
 static const char at_to_doom[] =
 {
     /* 0x00 */ 0x00,
@@ -179,6 +180,7 @@ static const char at_to_doom[] =
     /* 0x7e */ 0x0,
     /* 0x7f */ KEY_FIRE, //KEY_RCTRL,
 };
+#endif
 
 // Lookup table for mapping ASCII characters to their equivalent when
 // shift is pressed on an American layout keyboard:
@@ -337,5 +339,6 @@ void I_GetEvent(void)
 
 void I_InitInput(void)
 {
+	vanilla_keyboard_mapping = 1;
 }
 
diff --git a/doomgeneric/i_joystick.c b/doomgeneric/i_joystick.c
index 755aec3..a1b27ec 100644
--- a/doomgeneric/i_joystick.c
+++ b/doomgeneric/i_joystick.c
@@ -38,41 +38,43 @@
 #define DEAD_ZONE (32768 / 3)
 
 #ifdef ORIGCODE
-static SDL_Joystick *joystick = NULL;
+static SDL_Joystick *joystick;
 #endif
 
 // Configuration variables:
 
 // Standard default.cfg Joystick enable/disable
 
-static int usejoystick = 0;
+static int usejoystick;
 
 // Joystick to use, as an SDL joystick index:
 
-static int joystick_index = -1;
+static int joystick_index;
 
 // Which joystick axis to use for horizontal movement, and whether to
 // invert the direction:
 
-static int joystick_x_axis = 0;
-static int joystick_x_invert = 0;
+static int joystick_x_axis;
+static int joystick_x_invert;
 
 // Which joystick axis to use for vertical movement, and whether to
 // invert the direction:
 
-static int joystick_y_axis = 1;
-static int joystick_y_invert = 0;
+static int joystick_y_axis;
+static int joystick_y_invert;
 
 // Which joystick axis to use for strafing?
 
-static int joystick_strafe_axis = -1;
-static int joystick_strafe_invert = 0;
+static int joystick_strafe_axis;
+static int joystick_strafe_invert;
 
 // Virtual to physical button joystick button mapping. By default this
 // is a straight mapping.
-static int joystick_physical_buttons[NUM_VIRTUAL_BUTTONS] = {
+/*TODO:PAA
+static int const joystick_physical_buttons[NUM_VIRTUAL_BUTTONS] = {
     0, 1, 2, 3, 4, 5, 6, 7, 8, 9
 };
+*/
 
 void I_ShutdownJoystick(void)
 {
@@ -340,6 +342,9 @@ void I_BindJoystickVariables(void)
 {
     int i;
 
+	joystick_index = -1;
+	joystick_y_axis = 1;
+	joystick_strafe_axis = -1;
     M_BindVariable("use_joystick",          &usejoystick);
     M_BindVariable("joystick_index",        &joystick_index);
     M_BindVariable("joystick_x_axis",       &joystick_x_axis);
@@ -353,7 +358,7 @@ void I_BindJoystickVariables(void)
     {
         char name[32];
         M_snprintf(name, sizeof(name), "joystick_physical_button%i", i);
-        M_BindVariable(name, &joystick_physical_buttons[i]);
+//TODO:PAA        M_BindVariable(name, &joystick_physical_buttons[i]);
     }
 }
 
diff --git a/doomgeneric/i_scale.c b/doomgeneric/i_scale.c
index f88c694..c705082 100644
--- a/doomgeneric/i_scale.c
+++ b/doomgeneric/i_scale.c
@@ -49,11 +49,11 @@ static int dest_pitch;
 // stretch_tables[1] : 40% / 60%
 // All other combinations can be reached from these two tables.
 
-static byte *stretch_tables[2] = { NULL, NULL };
+static byte *stretch_tables[2];
 
 // 50%/50% stretch table, for 800x600 squash mode
 
-static byte *half_stretch_table = NULL;
+static byte *half_stretch_table;
 
 // Called to set the source and destination buffers before doing the
 // scale.
@@ -93,7 +93,7 @@ static boolean I_Scale1x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_scale_1x = {
+const screen_mode_t mode_scale_1x = {
     SCREENWIDTH, SCREENHEIGHT,
     NULL,
     I_Scale1x,
@@ -134,7 +134,7 @@ static boolean I_Scale2x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_scale_2x = {
+const screen_mode_t mode_scale_2x = {
     SCREENWIDTH * 2, SCREENHEIGHT * 2,
     NULL,
     I_Scale2x,
@@ -179,7 +179,7 @@ static boolean I_Scale3x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_scale_3x = {
+const screen_mode_t mode_scale_3x = {
     SCREENWIDTH * 3, SCREENHEIGHT * 3,
     NULL,
     I_Scale3x,
@@ -228,7 +228,7 @@ static boolean I_Scale4x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_scale_4x = {
+const screen_mode_t mode_scale_4x = {
     SCREENWIDTH * 4, SCREENHEIGHT * 4,
     NULL,
     I_Scale4x,
@@ -281,7 +281,7 @@ static boolean I_Scale5x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_scale_5x = {
+const screen_mode_t mode_scale_5x = {
     SCREENWIDTH * 5, SCREENHEIGHT * 5,
     NULL,
     I_Scale5x,
@@ -375,9 +375,8 @@ static void I_InitStretchTables(byte *palette)
     // mix 100% =  just write line 2
 
     printf("I_InitStretchTables: Generating lookup tables..");
-    fflush(stdout);
     stretch_tables[0] = GenerateStretchTable(palette, 20);
-    printf(".."); fflush(stdout);
+    printf("..");
     stretch_tables[1] = GenerateStretchTable(palette, 40);
     puts("");
 }
@@ -392,7 +391,6 @@ static void I_InitSquashTable(byte *palette)
     }
 
     printf("I_InitSquashTable: Generating lookup table..");
-    fflush(stdout);
     half_stretch_table = GenerateStretchTable(palette, 50);
     puts("");
 }
@@ -497,7 +495,7 @@ static boolean I_Stretch1x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_stretch_1x = {
+const screen_mode_t mode_stretch_1x = {
     SCREENWIDTH, SCREENHEIGHT_4_3,
     I_InitStretchTables,
     I_Stretch1x,
@@ -610,7 +608,7 @@ static boolean I_Stretch2x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_stretch_2x = {
+const screen_mode_t mode_stretch_2x = {
     SCREENWIDTH * 2, SCREENHEIGHT_4_3 * 2,
     I_InitStretchTables,
     I_Stretch2x,
@@ -749,7 +747,7 @@ static boolean I_Stretch3x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_stretch_3x = {
+const screen_mode_t mode_stretch_3x = {
     SCREENWIDTH * 3, SCREENHEIGHT_4_3 * 3,
     I_InitStretchTables,
     I_Stretch3x,
@@ -914,7 +912,7 @@ static boolean I_Stretch4x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_stretch_4x = {
+const screen_mode_t mode_stretch_4x = {
     SCREENWIDTH * 4, SCREENHEIGHT_4_3 * 4,
     I_InitStretchTables,
     I_Stretch4x,
@@ -1004,7 +1002,7 @@ static boolean I_Stretch5x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_stretch_5x = {
+const screen_mode_t mode_stretch_5x = {
     SCREENWIDTH * 5, SCREENHEIGHT_4_3 * 5,
     I_InitStretchTables,
     I_Stretch5x,
@@ -1084,7 +1082,7 @@ static boolean I_Squash1x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_squash_1x = {
+const screen_mode_t mode_squash_1x = {
     SCREENWIDTH_4_3, SCREENHEIGHT,
     I_InitStretchTables,
     I_Squash1x,
@@ -1183,7 +1181,7 @@ static boolean I_Squash2x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_squash_2x = {
+const screen_mode_t mode_squash_2x = {
     SCREENWIDTH_4_3 * 2, SCREENHEIGHT * 2,
     I_InitStretchTables,
     I_Squash2x,
@@ -1266,7 +1264,7 @@ static boolean I_Squash3x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_squash_3x = {
+const screen_mode_t mode_squash_3x = {
     800, 600,
     I_InitSquashTable,
     I_Squash3x,
@@ -1377,7 +1375,7 @@ static boolean I_Squash4x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_squash_4x = {
+const screen_mode_t mode_squash_4x = {
     SCREENWIDTH_4_3 * 4, SCREENHEIGHT * 4,
     I_InitStretchTables,
     I_Squash4x,
@@ -1442,7 +1440,7 @@ static boolean I_Squash5x(int x1, int y1, int x2, int y2)
     return true;
 }
 
-screen_mode_t mode_squash_5x = {
+const screen_mode_t mode_squash_5x = {
     SCREENWIDTH_4_3 * 5, SCREENHEIGHT * 5,
     I_InitStretchTables,
     I_Squash5x,
diff --git a/doomgeneric/i_sound.c b/doomgeneric/i_sound.c
index 71947d2..65ede18 100644
--- a/doomgeneric/i_sound.c
+++ b/doomgeneric/i_sound.c
@@ -36,29 +36,29 @@
 
 // Sound sample rate to use for digital output (Hz)
 
-int snd_samplerate = 44100;
+int snd_samplerate;
 
 // Maximum number of bytes to dedicate to allocated sound effects.
 // (Default: 64MB)
 
-int snd_cachesize = 64 * 1024 * 1024;
+int snd_cachesize;
 
 // Config variable that controls the sound buffer size.
 // We default to 28ms (1000 / 35fps = 1 buffer per tic).
 
-int snd_maxslicetime_ms = 28;
+int snd_maxslicetime_ms;
 
 // External command to invoke to play back music.
 
-char *snd_musiccmd = "";
+char *snd_musiccmd;
 
 // Low-level sound and music modules we are using
 
 static sound_module_t *sound_module;
 static music_module_t *music_module;
 
-int snd_musicdevice = SNDDEVICE_SB;
-int snd_sfxdevice = SNDDEVICE_SB;
+int snd_musicdevice;
+int snd_sfxdevice;
 
 // Sound modules
 
@@ -89,7 +89,7 @@ static int snd_mport = 0;
 
 // Compiled-in sound modules:
 
-static sound_module_t *sound_modules[] = 
+static const sound_module_t * const sound_modules[] = 
 {
 #ifdef FEATURE_SOUND
     &sound_sdl_module,
@@ -100,7 +100,7 @@ static sound_module_t *sound_modules[] =
 
 // Compiled-in music modules:
 
-static music_module_t *music_modules[] =
+static const music_module_t * const music_modules[] =
 {
 #ifdef FEATURE_SOUND
     &music_sdl_module,
@@ -149,7 +149,7 @@ static void InitSfxModule(boolean use_sfx_prefix)
 
             if (sound_modules[i]->Init(use_sfx_prefix))
             {
-                sound_module = sound_modules[i];
+                sound_module = (sound_module_t *)sound_modules[i];
                 return;
             }
         }
@@ -177,7 +177,7 @@ static void InitMusicModule(void)
 
             if (music_modules[i]->Init())
             {
-                music_module = music_modules[i];
+                music_module = (music_module_t *)music_modules[i];
                 return;
             }
         }
@@ -194,6 +194,13 @@ void I_InitSound(boolean use_sfx_prefix)
 {  
     boolean nosound, nosfx, nomusic;
 
+	snd_samplerate = 44100;
+	snd_cachesize = 64 * 1024 * 1024;
+	snd_maxslicetime_ms = 28;
+	snd_musiccmd = "";
+	snd_sfxdevice = SNDDEVICE_SB;
+	snd_musicdevice = SNDDEVICE_SB;
+
     //!
     // @vanilla
     //
diff --git a/doomgeneric/i_sound.h b/doomgeneric/i_sound.h
index e429e96..7570a28 100644
--- a/doomgeneric/i_sound.h
+++ b/doomgeneric/i_sound.h
@@ -27,6 +27,15 @@
 // SoundFX struct.
 //
 typedef struct sfxinfo_struct	sfxinfo_t;
+typedef struct sfxdata_struct	sfxdata_t;
+struct sfxdata_struct
+{
+	char name[9];
+	int priority;
+	int link_id;
+	int pitch;
+	int volume;
+};
 
 struct sfxinfo_struct
 {
@@ -42,7 +51,7 @@ struct sfxinfo_struct
     int priority;
 
     // referenced sound if a link
-    sfxinfo_t *link;
+    const sfxinfo_t *link;
 
     // pitch if a link
     int pitch;
diff --git a/doomgeneric/i_system.c b/doomgeneric/i_system.c
index 5d00091..f1f1876 100644
--- a/doomgeneric/i_system.c
+++ b/doomgeneric/i_system.c
@@ -365,7 +365,6 @@ void I_Error (char *error, ...)
 
     if (already_quitting)
     {
-        fprintf(stderr, "Warning: recursive call to I_Error detected.\n");
 #if ORIGCODE
         exit(-1);
 #endif
@@ -378,10 +377,9 @@ void I_Error (char *error, ...)
     // Message first.
     va_start(argptr, error);
     //fprintf(stderr, "\nError: ");
-    vfprintf(stderr, error, argptr);
-    fprintf(stderr, "\n\n");
+    vprintf(error, argptr);
+    printf("\n\n");
     va_end(argptr);
-    fflush(stderr);
 
     // Write a copy of the message into buffer.
     va_start(argptr, error);
@@ -494,17 +492,17 @@ static const unsigned char mem_dump_dosbox[DOS_MEM_DUMP_SIZE] = {
   0x00, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00};
 static unsigned char mem_dump_custom[DOS_MEM_DUMP_SIZE];
 
-static const unsigned char *dos_mem_dump = mem_dump_dos622;
+static const unsigned char *dos_mem_dump;
 
 boolean I_GetMemoryValue(unsigned int offset, void *value, int size)
 {
-    static boolean firsttime = true;
+    static boolean hasrun;
 
-    if (firsttime)
+    if (!hasrun)
     {
         int p, i, val;
 
-        firsttime = false;
+        hasrun = true;
         i = 0;
 
         //!
diff --git a/doomgeneric/i_video.c b/doomgeneric/i_video.c
index bf63035..9ddc87b 100644
--- a/doomgeneric/i_video.c
+++ b/doomgeneric/i_video.c
@@ -22,8 +22,10 @@
 //
 //-----------------------------------------------------------------------------
 
+#if 0
 static const char
 rcsid[] = "$Id: i_x.c,v 1.6 1997/02/03 22:45:10 b1 Exp $";
+#endif
 
 #include "config.h"
 #include "v_video.h"
@@ -72,8 +74,8 @@ struct FB_ScreenInfo
 };
 
 static struct FB_ScreenInfo s_Fb;
-int fb_scaling = 1;
-int usemouse = 0;
+int fb_scaling;
+int usemouse;
 
 struct color {
     uint32_t b:8;
@@ -108,12 +110,12 @@ boolean screenvisible;
 // the values exceed the value of mouse_threshold, they are multiplied
 // by mouse_acceleration to increase the speed.
 
-float mouse_acceleration = 2.0;
-int mouse_threshold = 10;
+float mouse_acceleration;
+int mouse_threshold;
 
 // Gamma correction level to use
 
-int usegamma = 0;
+int usegamma;
 
 typedef struct
 {
@@ -177,6 +179,10 @@ void cmap_to_fb(uint8_t * out, uint8_t * in, int in_pixels)
 void I_InitGraphics (void)
 {
     int i;
+    fb_scaling = 1;
+    mouse_acceleration = 2.0;
+    mouse_threshold = 10;
+
 
 	memset(&s_Fb, 0, sizeof(struct FB_ScreenInfo));
 	s_Fb.xres = DOOMGENERIC_RESX;
@@ -196,13 +202,13 @@ void I_InitGraphics (void)
 	s_Fb.transp.offset = 24;
 	
 
-    printf("I_InitGraphics: framebuffer: x_res: %d, y_res: %d, x_virtual: %d, y_virtual: %d, bpp: %d\n",
+    printf("I_InitGraphics: framebuffer: x_res: %lu, y_res: %lu, x_virtual: %lu, y_virtual: %lu, bpp: %lu\n",
             s_Fb.xres, s_Fb.yres, s_Fb.xres_virtual, s_Fb.yres_virtual, s_Fb.bits_per_pixel);
 
-    printf("I_InitGraphics: framebuffer: RGBA: %d%d%d%d, red_off: %d, green_off: %d, blue_off: %d, transp_off: %d\n",
+    printf("I_InitGraphics: framebuffer: RGBA: %lu%lu%lu%lu, red_off: %lu, green_off: %lu, blue_off: %lu, transp_off: %lu\n",
             s_Fb.red.length, s_Fb.green.length, s_Fb.blue.length, s_Fb.transp.length, s_Fb.red.offset, s_Fb.green.offset, s_Fb.blue.offset, s_Fb.transp.offset);
 
-    printf("I_InitGraphics: DOOM screen size: w x h: %d x %d\n", SCREENWIDTH, SCREENHEIGHT);
+    printf("I_InitGraphics: DOOM screen size: w x h: %u x %u\n", SCREENWIDTH, SCREENHEIGHT);
 
 
     i = M_CheckParmWithArgs("-scaling", 1);
@@ -253,14 +259,14 @@ void I_UpdateNoBlit (void)
 void I_FinishUpdate (void)
 {
     int y;
-    int x_offset, y_offset, x_offset_end;
+    int x_offset, x_offset_end ;//, y_offset;
     unsigned char *line_in, *line_out;
 
     /* Offsets in case FB is bigger than DOOM */
     /* 600 = s_Fb heigt, 200 screenheight */
     /* 600 = s_Fb heigt, 200 screenheight */
     /* 2048 =s_Fb width, 320 screenwidth */
-    y_offset     = (((s_Fb.yres - (SCREENHEIGHT * fb_scaling)) * s_Fb.bits_per_pixel/8)) / 2;
+    //y_offset     = (((s_Fb.yres - (SCREENHEIGHT * fb_scaling)) * s_Fb.bits_per_pixel/8)) / 2;
     x_offset     = (((s_Fb.xres - (SCREENWIDTH  * fb_scaling)) * s_Fb.bits_per_pixel/8)) / 2; // XXX: siglent FB hack: /4 instead of /2, since it seems to handle the resolution in a funny way
     //x_offset     = 0;
     x_offset_end = ((s_Fb.xres - (SCREENWIDTH  * fb_scaling)) * s_Fb.bits_per_pixel/8) - x_offset;
diff --git a/doomgeneric/i_video.h b/doomgeneric/i_video.h
index 3c7db19..b317229 100644
--- a/doomgeneric/i_video.h
+++ b/doomgeneric/i_video.h
@@ -111,6 +111,8 @@ void I_ReadScreen (byte* scr);
 
 void I_BeginRead (void);
 
+void I_EndRead (void);
+
 void I_SetWindowTitle(char *title);
 
 void I_CheckIsScreensaver(void);
diff --git a/doomgeneric/info.c b/doomgeneric/info.c
index 9389e84..6964690 100644
--- a/doomgeneric/info.c
+++ b/doomgeneric/info.c
@@ -29,7 +29,7 @@
 
 #include "p_mobj.h"
 
-char *sprnames[] = {
+const char * const sprnames[] = {
     "TROO","SHTG","PUNG","PISG","PISF","SHTF","SHT2","CHGG","CHGF","MISG",
     "MISF","SAWG","PLSG","PLSF","BFGG","BFGF","BLUD","PUFF","BAL1","BAL2",
     "PLSS","PLSE","MISL","BFS1","BFE1","BFE2","TFOG","IFOG","PLAY","POSS",
@@ -124,7 +124,7 @@ void A_SpawnFly();
 void A_BrainExplode();
 
 
-state_t	states[NUMSTATES] = {
+const state_t	states[NUMSTATES] = {
     {SPR_TROO,0,-1,{NULL},S_NULL,0,0},	// S_NULL
     {SPR_SHTG,4,0,{A_Light0},S_NULL,0,0},	// S_LIGHTDONE
     {SPR_PUNG,0,1,{A_WeaponReady},S_PUNCH,0,0},	// S_PUNCH
@@ -1095,7 +1095,7 @@ state_t	states[NUMSTATES] = {
 };
 
 
-mobjinfo_t mobjinfo[NUMMOBJTYPES] = {
+const mobjinfo_t mobjinfo[NUMMOBJTYPES] = {
 
     {		// MT_PLAYER
 	-1,		// doomednum
diff --git a/doomgeneric/info.h b/doomgeneric/info.h
index 648b518..2981066 100644
--- a/doomgeneric/info.h
+++ b/doomgeneric/info.h
@@ -1153,8 +1153,8 @@ typedef struct
     int misc2;
 } state_t;
 
-extern state_t	states[NUMSTATES];
-extern char *sprnames[];
+extern  const state_t	states[NUMSTATES];
+extern  const char * const sprnames[];
 
 typedef enum {
     MT_PLAYER,
@@ -1326,6 +1326,6 @@ typedef struct
 
 } mobjinfo_t;
 
-extern mobjinfo_t mobjinfo[NUMMOBJTYPES];
+extern const mobjinfo_t mobjinfo[NUMMOBJTYPES];
 
 #endif
diff --git a/doomgeneric/m_cheat.c b/doomgeneric/m_cheat.c
index 1565f9e..cc445b5 100644
--- a/doomgeneric/m_cheat.c
+++ b/doomgeneric/m_cheat.c
@@ -33,9 +33,10 @@
 //
 int
 cht_CheckCheat
-( cheatseq_t*	cht,
+( const cheatseq_t*	cht,
   char		key )
 {
+#if 0	// TODO:PAA
     // if we make a short sequence on a cheat with parameters, this 
     // will not work in vanilla doom.  behave the same.
 
@@ -74,13 +75,14 @@ cht_CheckCheat
     }
     
     // cheat not matched yet
+#endif
 
     return false;
 }
 
 void
 cht_GetParam
-( cheatseq_t*	cht,
+( const cheatseq_t*	cht,
   char*		buffer )
 {
     memcpy(buffer, cht->parameter_buf, cht->parameter_chars);
diff --git a/doomgeneric/m_cheat.h b/doomgeneric/m_cheat.h
index 6775e70..e078313 100644
--- a/doomgeneric/m_cheat.h
+++ b/doomgeneric/m_cheat.h
@@ -49,13 +49,13 @@ typedef struct
 
 int
 cht_CheckCheat
-( cheatseq_t*		cht,
+( const cheatseq_t*		cht,
   char			key );
 
 
 void
 cht_GetParam
-( cheatseq_t*		cht,
+( const cheatseq_t*		cht,
   char*			buffer );
 
 
diff --git a/doomgeneric/m_config.c b/doomgeneric/m_config.c
index 865e168..928d11e 100644
--- a/doomgeneric/m_config.c
+++ b/doomgeneric/m_config.c
@@ -61,7 +61,7 @@ typedef enum
 typedef struct
 {
     // Name of the variable
-    char *name;
+    const char *name;
 
     // Pointer to the location in memory of the variable
     void *location;
@@ -108,7 +108,7 @@ typedef struct
 
 //! @begin_config_file default
 
-static default_t	doom_defaults_list[] =
+static const default_t	doom_defaults_list[] =
 {
     //!
     // Mouse sensitivity.  This value is used to multiply input mouse
@@ -672,16 +672,11 @@ static default_t	doom_defaults_list[] =
     CONFIG_VARIABLE_INT(comport),
 };
 
-static default_collection_t doom_defaults =
-{
-    doom_defaults_list,
-    arrlen(doom_defaults_list),
-    NULL,
-};
+static default_collection_t *doom_defaults;
 
 //! @begin_config_file extended
 
-static default_t extra_defaults_list[] =
+static const default_t extra_defaults_list[] =
 {
     //!
     // @game heretic hexen strife
@@ -1551,12 +1546,7 @@ static default_t extra_defaults_list[] =
     CONFIG_VARIABLE_KEY(key_multi_msgplayer8),
 };
 
-static default_collection_t extra_defaults =
-{
-    extra_defaults_list,
-    arrlen(extra_defaults_list),
-    NULL,
-};
+static default_collection_t *extra_defaults;
 
 // Search a collection for a variable
 
@@ -1606,10 +1596,10 @@ static const int scantokey[128] =
 };
 
 
-static void SaveDefaultCollection(default_collection_t *collection)
+static void SaveDefaultCollection(const default_collection_t *collection)
 {
 #if ORIGCODE
-    default_t *defaults;
+    const default_t *defaults;
     int i, v;
     FILE *f;
 	
@@ -1845,8 +1835,8 @@ void M_SetConfigFilenames(char *main_config, char *extra_config)
 
 void M_SaveDefaults (void)
 {
-    SaveDefaultCollection(&doom_defaults);
-    SaveDefaultCollection(&extra_defaults);
+    SaveDefaultCollection(doom_defaults);
+    SaveDefaultCollection(extra_defaults);
 }
 
 //
@@ -1860,18 +1850,44 @@ void M_SaveDefaultsAlternate(char *main, char *extra)
 
     // Temporarily change the filenames
 
-    orig_main = doom_defaults.filename;
-    orig_extra = extra_defaults.filename;
+    orig_main = doom_defaults->filename;
+    orig_extra = extra_defaults->filename;
 
-    doom_defaults.filename = main;
-    extra_defaults.filename = extra;
+    doom_defaults->filename = main;
+    extra_defaults->filename = extra;
 
     M_SaveDefaults();
 
     // Restore normal filenames
 
-    doom_defaults.filename = orig_main;
-    extra_defaults.filename = orig_extra;
+    doom_defaults->filename = orig_main;
+    extra_defaults->filename = orig_extra;
+}
+
+//
+// M_InitConfig
+//
+void M_InitConfig(void)
+{
+	int i;
+	// inital defaults..
+    static default_t defs_list[arrlen(doom_defaults_list)];
+    static default_collection_t init_defs;
+    init_defs.defaults = defs_list;
+    init_defs.numdefaults = arrlen(doom_defaults_list);
+    init_defs.filename = NULL;
+    for (i=0; i<init_defs.numdefaults; i++)
+        defs_list[i] = doom_defaults_list[i];
+    doom_defaults = &init_defs;
+
+    static default_t extra_list[arrlen(extra_defaults_list)];
+    static default_collection_t extra_init_defs;
+    extra_init_defs.defaults = extra_list;
+    extra_init_defs.numdefaults = arrlen(extra_defaults_list);
+    extra_init_defs.filename = NULL;
+    for (i=0; i<extra_init_defs.numdefaults; i++)
+        extra_list[i] = extra_defaults_list[i];
+    extra_defaults = &extra_init_defs;
 }
 
 //
@@ -1896,16 +1912,16 @@ void M_LoadDefaults (void)
 
     if (i)
     {
-	doom_defaults.filename = myargv[i+1];
-	printf ("	default file: %s\n",doom_defaults.filename);
+	doom_defaults->filename = myargv[i+1];
+	printf ("	default file: %s\n",doom_defaults->filename);
     }
     else
     {
-        doom_defaults.filename
+        doom_defaults->filename
             = M_StringJoin(configdir, default_main_config, NULL);
     }
 
-    printf("saving config in %s\n", doom_defaults.filename);
+    printf("saving config in %s\n", doom_defaults->filename);
 
     //!
     // @arg <file>
@@ -1918,18 +1934,18 @@ void M_LoadDefaults (void)
 
     if (i)
     {
-        extra_defaults.filename = myargv[i+1];
+        extra_defaults->filename = myargv[i+1];
         printf("        extra configuration file: %s\n", 
-               extra_defaults.filename);
+               extra_defaults->filename);
     }
     else
     {
-        extra_defaults.filename
+        extra_defaults->filename
             = M_StringJoin(configdir, default_extra_config, NULL);
     }
 
-    LoadDefaultCollection(&doom_defaults);
-    LoadDefaultCollection(&extra_defaults);
+    LoadDefaultCollection(doom_defaults);
+    LoadDefaultCollection(extra_defaults);
 }
 
 // Get a configuration file variable by its name
@@ -1940,11 +1956,11 @@ static default_t *GetDefaultForName(char *name)
 
     // Try the main list and the extras
 
-    result = SearchCollection(&doom_defaults, name);
+    result = SearchCollection(doom_defaults, name);
 
     if (result == NULL)
     {
-        result = SearchCollection(&extra_defaults, name);
+        result = SearchCollection(extra_defaults, name);
     }
 
     // Not found? Internal error.
diff --git a/doomgeneric/m_config.h b/doomgeneric/m_config.h
index a17de2b..3fb37b2 100644
--- a/doomgeneric/m_config.h
+++ b/doomgeneric/m_config.h
@@ -22,6 +22,7 @@
 
 #include "doomtype.h"
 
+void M_InitConfig(void);
 void M_LoadDefaults(void);
 void M_SaveDefaults(void);
 void M_SaveDefaultsAlternate(char *main, char *extra);
diff --git a/doomgeneric/m_controls.c b/doomgeneric/m_controls.c
index f0ffa01..956a97f 100644
--- a/doomgeneric/m_controls.c
+++ b/doomgeneric/m_controls.c
@@ -26,47 +26,47 @@
 // Keyboard controls
 //
 
-int key_right = KEY_RIGHTARROW;
-int key_left = KEY_LEFTARROW;
-int key_up = KEY_UPARROW;
-int key_down = KEY_DOWNARROW; 
-int key_strafeleft = KEY_STRAFE_L;
-int key_straferight = KEY_STRAFE_R;
-int key_fire = KEY_FIRE;
-int key_use = KEY_USE;
-int key_strafe = KEY_RALT;
-int key_speed = KEY_RSHIFT; 
+int key_right;
+int key_left;
+int key_up;
+int key_down;
+int key_strafeleft;
+int key_straferight;
+int key_fire;
+int key_use;
+int key_strafe;
+int key_speed;
 
 // 
 // Heretic keyboard controls
 //
  
-int key_flyup = KEY_PGUP;
-int key_flydown = KEY_INS;
-int key_flycenter = KEY_HOME;
+int key_flyup;
+int key_flydown;
+int key_flycenter;
 
-int key_lookup = KEY_PGDN;
-int key_lookdown = KEY_DEL;
-int key_lookcenter = KEY_END;
+int key_lookup;
+int key_lookdown;
+int key_lookcenter;
 
-int key_invleft = '[';
-int key_invright = ']';
-int key_useartifact = KEY_ENTER;
+int key_invleft;
+int key_invright;
+int key_useartifact;
 
 //
 // Hexen key controls
 //
 
-int key_jump = '/';
+int key_jump;
 
-int key_arti_all             = KEY_BACKSPACE;
-int key_arti_health          = '\\';
-int key_arti_poisonbag       = '0';
-int key_arti_blastradius     = '9';
-int key_arti_teleport        = '8';
-int key_arti_teleportother   = '7';
-int key_arti_egg             = '6';
-int key_arti_invulnerability = '5';
+int key_arti_all;
+int key_arti_health;
+int key_arti_poisonbag;
+int key_arti_blastradius;
+int key_arti_teleport;
+int key_arti_teleportother;
+int key_arti_egg;
+int key_arti_invulnerability;
 
 //
 // Strife key controls
@@ -77,125 +77,125 @@ int key_arti_invulnerability = '5';
 // Note: Strife also uses key_invleft, key_invright, key_jump, key_lookup, and
 // key_lookdown, but with different default values.
 
-int key_usehealth = 'h';
-int key_invquery  = 'q';
-int key_mission   = 'w';
-int key_invpop    = 'z';
-int key_invkey    = 'k';
-int key_invhome   = KEY_HOME;
-int key_invend    = KEY_END;
-int key_invuse    = KEY_ENTER;
-int key_invdrop   = KEY_BACKSPACE;
+int key_usehealth;
+int key_invquery;
+int key_mission;
+int key_invpop;
+int key_invkey;
+int key_invhome;
+int key_invend;
+int key_invuse;
+int key_invdrop;
 
 
 //
 // Mouse controls
 //
 
-int mousebfire = 0;
-int mousebstrafe = 1;
-int mousebforward = 2;
+int mousebfire;
+int mousebstrafe;
+int mousebforward;
 
-int mousebjump = -1;
+int mousebjump;
 
-int mousebstrafeleft = -1;
-int mousebstraferight = -1;
-int mousebbackward = -1;
-int mousebuse = -1;
+int mousebstrafeleft;
+int mousebstraferight;
+int mousebbackward;
+int mousebuse;
 
-int mousebprevweapon = -1;
-int mousebnextweapon = -1;
+int mousebprevweapon;
+int mousebnextweapon;
 
 
-int key_message_refresh = KEY_ENTER;
-int key_pause = KEY_PAUSE;
-int key_demo_quit = 'q';
-int key_spy = KEY_F12;
+int key_message_refresh;
+int key_pause;
+int key_demo_quit;
+int key_spy;
 
 // Multiplayer chat keys:
 
-int key_multi_msg = 't';
+int key_multi_msg;
 int key_multi_msgplayer[8];
 
 // Weapon selection keys:
 
-int key_weapon1 = '1';
-int key_weapon2 = '2';
-int key_weapon3 = '3';
-int key_weapon4 = '4';
-int key_weapon5 = '5';
-int key_weapon6 = '6';
-int key_weapon7 = '7';
-int key_weapon8 = '8';
-int key_prevweapon = 0;
-int key_nextweapon = 0;
+int key_weapon1;
+int key_weapon2;
+int key_weapon3;
+int key_weapon4;
+int key_weapon5;
+int key_weapon6;
+int key_weapon7;
+int key_weapon8;
+int key_prevweapon;
+int key_nextweapon;
 
 // Map control keys:
 
-int key_map_north     = KEY_UPARROW;
-int key_map_south     = KEY_DOWNARROW;
-int key_map_east      = KEY_RIGHTARROW;
-int key_map_west      = KEY_LEFTARROW;
-int key_map_zoomin    = '=';
-int key_map_zoomout   = '-';
-int key_map_toggle    = KEY_TAB;
-int key_map_maxzoom   = '0';
-int key_map_follow    = 'f';
-int key_map_grid      = 'g';
-int key_map_mark      = 'm';
-int key_map_clearmark = 'c';
+int key_map_north;
+int key_map_south;
+int key_map_east;
+int key_map_west;
+int key_map_zoomin;
+int key_map_zoomout;
+int key_map_toggle;
+int key_map_maxzoom;
+int key_map_follow;
+int key_map_grid;
+int key_map_mark;
+int key_map_clearmark;
 
 // menu keys:
 
-int key_menu_activate  = KEY_ESCAPE;
-int key_menu_up        = KEY_UPARROW;
-int key_menu_down      = KEY_DOWNARROW;
-int key_menu_left      = KEY_LEFTARROW;
-int key_menu_right     = KEY_RIGHTARROW;
-int key_menu_back      = KEY_BACKSPACE;
-int key_menu_forward   = KEY_ENTER;
-int key_menu_confirm   = 'y';
-int key_menu_abort     = 'n';
-
-int key_menu_help      = KEY_F1;
-int key_menu_save      = KEY_F2;
-int key_menu_load      = KEY_F3;
-int key_menu_volume    = KEY_F4;
-int key_menu_detail    = KEY_F5;
-int key_menu_qsave     = KEY_F6;
-int key_menu_endgame   = KEY_F7;
-int key_menu_messages  = KEY_F8;
-int key_menu_qload     = KEY_F9;
-int key_menu_quit      = KEY_F10;
-int key_menu_gamma     = KEY_F11;
-
-int key_menu_incscreen = KEY_EQUALS;
-int key_menu_decscreen = KEY_MINUS;
-int key_menu_screenshot = 0;
+int key_menu_activate;
+int key_menu_up;
+int key_menu_down;
+int key_menu_left;
+int key_menu_right;
+int key_menu_back;
+int key_menu_forward;
+int key_menu_confirm;
+int key_menu_abort;
+
+int key_menu_help;
+int key_menu_save;
+int key_menu_load;
+int key_menu_volume;
+int key_menu_detail;
+int key_menu_qsave;
+int key_menu_endgame;
+int key_menu_messages;
+int key_menu_qload;
+int key_menu_quit;
+int key_menu_gamma;
+
+int key_menu_incscreen;
+int key_menu_decscreen;
+int key_menu_screenshot;
 
 //
 // Joystick controls
 //
 
-int joybfire = 0;
-int joybstrafe = 1;
-int joybuse = 3;
-int joybspeed = 2;
+int joybfire;
+int joybstrafe;
+int joybuse;
+int joybspeed;
 
-int joybstrafeleft = -1;
-int joybstraferight = -1;
+int joybstrafeleft;
+int joybstraferight;
 
-int joybjump = -1;
+int joybjump;
 
-int joybprevweapon = -1;
-int joybnextweapon = -1;
+int joybprevweapon;
+int joybnextweapon;
 
-int joybmenu = -1;
+int joybmenu;
 
 // Control whether if a mouse button is double clicked, it acts like 
 // "use" has been pressed
 
-int dclick_use = 1;
+int dclick_use;
  
 // 
 // Bind all of the common controls used by Doom and all other games.
@@ -393,6 +393,176 @@ void M_BindChatControls(unsigned int num_players)
 
 void M_ApplyPlatformDefaults(void)
 {
-    // no-op. Add your platform-specific patches here.
+    key_right = KEY_RIGHTARROW;
+    key_left = KEY_LEFTARROW;
+    key_up = KEY_UPARROW;
+    key_down = KEY_DOWNARROW; 
+    key_strafeleft = KEY_STRAFE_L;
+    key_straferight = KEY_STRAFE_R;
+    key_fire = KEY_FIRE;
+    key_use = KEY_USE;
+    key_strafe = KEY_RALT;
+    key_speed = KEY_RSHIFT; 
+
+// 
+// Heretic keyboard controls
+//
+ 
+    key_flyup = KEY_PGUP;
+    key_flydown = KEY_INS;
+    key_flycenter = KEY_HOME;
+
+    key_lookup = KEY_PGDN;
+    key_lookdown = KEY_DEL;
+    key_lookcenter = KEY_END;
+
+    key_invleft = '[';
+    key_invright = ']';
+    key_useartifact = KEY_ENTER;
+
+//
+// Hexen key controls
+//
+
+    key_jump = '/';
+
+    key_arti_all             = KEY_BACKSPACE;
+    key_arti_health          = '\\';
+    key_arti_poisonbag       = '0';
+    key_arti_blastradius     = '9';
+    key_arti_teleport        = '8';
+    key_arti_teleportother   = '7';
+    key_arti_egg             = '6';
+    key_arti_invulnerability = '5';
+
+//
+// Strife key controls
+//
+// haleyjd 09/01/10
+//
+
+// Note: Strife also uses key_invleft, key_invright, key_jump, key_lookup, and
+// key_lookdown, but with different default values.
+
+    key_usehealth = 'h';
+    key_invquery  = 'q';
+    key_mission   = 'w';
+    key_invpop    = 'z';
+    key_invkey    = 'k';
+    key_invhome   = KEY_HOME;
+    key_invend    = KEY_END;
+    key_invuse    = KEY_ENTER;
+    key_invdrop   = KEY_BACKSPACE;
+
+
+//
+// Mouse controls
+//
+
+    mousebfire = 0;
+    mousebstrafe = 1;
+    mousebforward = 2;
+
+    mousebjump = -1;
+
+    mousebstrafeleft = -1;
+    mousebstraferight = -1;
+    mousebbackward = -1;
+    mousebuse = -1;
+
+    mousebprevweapon = -1;
+    mousebnextweapon = -1;
+
+
+    key_message_refresh = KEY_ENTER;
+    key_pause = KEY_PAUSE;
+    key_demo_quit = 'q';
+    key_spy = KEY_F12;
+
+// Multiplayer chat keys:
+
+    key_multi_msg = 't';
+
+// Weapon selection keys:
+
+    key_weapon1 = '1';
+    key_weapon2 = '2';
+    key_weapon3 = '3';
+    key_weapon4 = '4';
+    key_weapon5 = '5';
+    key_weapon6 = '6';
+    key_weapon7 = '7';
+    key_weapon8 = '8';
+    key_prevweapon = 0;
+    key_nextweapon = 0;
+
+// Map control keys:
+
+    key_map_north     = KEY_UPARROW;
+    key_map_south     = KEY_DOWNARROW;
+    key_map_east      = KEY_RIGHTARROW;
+    key_map_west      = KEY_LEFTARROW;
+    key_map_zoomin    = '=';
+    key_map_zoomout   = '-';
+    key_map_toggle    = KEY_TAB;
+    key_map_maxzoom   = '0';
+    key_map_follow    = 'f';
+    key_map_grid      = 'g';
+    key_map_mark      = 'm';
+    key_map_clearmark = 'c';
+
+// menu keys:
+
+    key_menu_activate  = KEY_ESCAPE;
+    key_menu_up        = KEY_UPARROW;
+    key_menu_down      = KEY_DOWNARROW;
+    key_menu_left      = KEY_LEFTARROW;
+    key_menu_right     = KEY_RIGHTARROW;
+    key_menu_back      = KEY_BACKSPACE;
+    key_menu_forward   = KEY_ENTER;
+    key_menu_confirm   = 'y';
+    key_menu_abort     = 'n';
+
+    key_menu_help      = KEY_F1;
+    key_menu_save      = KEY_F2;
+    key_menu_load      = KEY_F3;
+    key_menu_volume    = KEY_F4;
+    key_menu_detail    = KEY_F5;
+    key_menu_qsave     = KEY_F6;
+    key_menu_endgame   = KEY_F7;
+    key_menu_messages  = KEY_F8;
+    key_menu_qload     = KEY_F9;
+    key_menu_quit      = KEY_F10;
+    key_menu_gamma     = KEY_F11;
+
+    key_menu_incscreen = KEY_EQUALS;
+    key_menu_decscreen = KEY_MINUS;
+    key_menu_screenshot = 0;
+
+//
+// Joystick controls
+//
+
+    joybfire = 0;
+    joybstrafe = 1;
+    joybuse = 3;
+    joybspeed = 2;
+
+    joybstrafeleft = -1;
+    joybstraferight = -1;
+
+    joybjump = -1;
+
+    joybprevweapon = -1;
+    joybnextweapon = -1;
+
+    joybmenu = -1;
+
+// Control whether if a mouse button is double clicked, it acts like 
+// "use" has been pressed
+
+    dclick_use = 1;
+ 
+    // Add your platform-specific patches here.
 }
 
diff --git a/doomgeneric/m_menu.c b/doomgeneric/m_menu.c
index 6df9655..3a24e46 100644
--- a/doomgeneric/m_menu.c
+++ b/doomgeneric/m_menu.c
@@ -67,15 +67,15 @@ extern boolean		chat_on;		// in heads-up code
 //
 // defaulted values
 //
-int			mouseSensitivity = 5;
+int			mouseSensitivity;
 
 // Show messages has default, 0 = off, 1 = on
-int			showMessages = 1;
+int			showMessages;
 	
 
 // Blocky mode, has default, 0 = high, 1 = normal
-int			detailLevel = 0;
-int			screenblocks = 10;
+int			detailLevel;
+int			screenblocks;
 
 // temp for screenblocks (0-9)
 int			screenSize;
@@ -98,7 +98,7 @@ boolean			messageNeedsInput;
 
 void    (*messageRoutine)(int response);
 
-char gammamsg[5][26] =
+const char gammamsg[5][26] =
 {
     GAMMALVL0,
     GAMMALVL1,
@@ -152,7 +152,7 @@ typedef struct menu_s
 {
     short		numitems;	// # of menu items
     struct menu_s*	prevMenu;	// previous menu
-    menuitem_t*		menuitems;	// menu items
+    const menuitem_t*		menuitems;	// menu items
     void		(*routine)();	// draw routine
     short		x;
     short		y;		// x,y of menu
@@ -165,7 +165,7 @@ short		whichSkull;		// which skull to draw
 
 // graphic name of skulls
 // warning: initializer-string for array of chars is too long
-char    *skullName[2] = {"M_SKULL1","M_SKULL2"};
+const char * const skullName[2] = {"M_SKULL1","M_SKULL2"};
 
 // current menudef
 menu_t*	currentMenu;                          
@@ -239,7 +239,7 @@ enum
     main_end
 } main_e;
 
-menuitem_t MainMenu[]=
+const menuitem_t MainMenu[]=
 {
     {1,"M_NGAME",M_NewGame,'n'},
     {1,"M_OPTION",M_Options,'o'},
@@ -250,7 +250,7 @@ menuitem_t MainMenu[]=
     {1,"M_QUITG",M_QuitDOOM,'q'}
 };
 
-menu_t  MainDef =
+const menu_t  CMainDef =
 {
     main_end,
     NULL,
@@ -259,6 +259,7 @@ menu_t  MainDef =
     97,64,
     0
 };
+static menu_t MainDef;
 
 
 //
@@ -273,7 +274,7 @@ enum
     ep_end
 } episodes_e;
 
-menuitem_t EpisodeMenu[]=
+const menuitem_t EpisodeMenu[]=
 {
     {1,"M_EPI1", M_Episode,'k'},
     {1,"M_EPI2", M_Episode,'t'},
@@ -281,7 +282,7 @@ menuitem_t EpisodeMenu[]=
     {1,"M_EPI4", M_Episode,'t'}
 };
 
-menu_t  EpiDef =
+const menu_t  CEpiDef =
 {
     ep_end,		// # of menu items
     &MainDef,		// previous menu
@@ -290,6 +291,7 @@ menu_t  EpiDef =
     48,63,              // x,y
     ep1			// lastOn
 };
+static menu_t EpiDef;
 
 //
 // NEW GAME
@@ -304,7 +306,7 @@ enum
     newg_end
 } newgame_e;
 
-menuitem_t NewGameMenu[]=
+const menuitem_t NewGameMenu[]=
 {
     {1,"M_JKILL",	M_ChooseSkill, 'i'},
     {1,"M_ROUGH",	M_ChooseSkill, 'h'},
@@ -313,7 +315,7 @@ menuitem_t NewGameMenu[]=
     {1,"M_NMARE",	M_ChooseSkill, 'n'}
 };
 
-menu_t  NewDef =
+const menu_t  CNewDef =
 {
     newg_end,		// # of menu items
     &EpiDef,		// previous menu
@@ -322,6 +324,7 @@ menu_t  NewDef =
     48,63,              // x,y
     hurtme		// lastOn
 };
+static menu_t NewDef;
 
 
 
@@ -341,7 +344,7 @@ enum
     opt_end
 } options_e;
 
-menuitem_t OptionsMenu[]=
+const menuitem_t OptionsMenu[]=
 {
     {1,"M_ENDGAM",	M_EndGame,'e'},
     {1,"M_MESSG",	M_ChangeMessages,'m'},
@@ -353,7 +356,7 @@ menuitem_t OptionsMenu[]=
     {1,"M_SVOL",	M_Sound,'s'}
 };
 
-menu_t  OptionsDef =
+const menu_t  COptionsDef =
 {
     opt_end,
     &MainDef,
@@ -362,6 +365,7 @@ menu_t  OptionsDef =
     60,37,
     0
 };
+static menu_t OptionsDef;
 
 //
 // Read This! MENU 1 & 2
@@ -372,12 +376,12 @@ enum
     read1_end
 } read_e;
 
-menuitem_t ReadMenu1[] =
+const menuitem_t ReadMenu1[] =
 {
     {1,"",M_ReadThis2,0}
 };
 
-menu_t  ReadDef1 =
+const menu_t  CReadDef1 =
 {
     read1_end,
     &MainDef,
@@ -386,6 +390,7 @@ menu_t  ReadDef1 =
     280,185,
     0
 };
+static menu_t ReadDef1;
 
 enum
 {
@@ -393,12 +398,12 @@ enum
     read2_end
 } read_e2;
 
-menuitem_t ReadMenu2[]=
+const menuitem_t ReadMenu2[]=
 {
     {1,"",M_FinishReadThis,0}
 };
 
-menu_t  ReadDef2 =
+const menu_t  CReadDef2 =
 {
     read2_end,
     &ReadDef1,
@@ -407,6 +412,7 @@ menu_t  ReadDef2 =
     330,175,
     0
 };
+static menu_t ReadDef2;
 
 //
 // SOUND VOLUME MENU
@@ -420,7 +426,7 @@ enum
     sound_end
 } sound_e;
 
-menuitem_t SoundMenu[]=
+const menuitem_t SoundMenu[]=
 {
     {2,"M_SFXVOL",M_SfxVol,'s'},
     {-1,"",0,'\0'},
@@ -428,7 +434,7 @@ menuitem_t SoundMenu[]=
     {-1,"",0,'\0'}
 };
 
-menu_t  SoundDef =
+const menu_t  CSoundDef =
 {
     sound_end,
     &OptionsDef,
@@ -437,6 +443,7 @@ menu_t  SoundDef =
     80,64,
     0
 };
+static menu_t SoundDef;
 
 //
 // LOAD GAME MENU
@@ -452,7 +459,7 @@ enum
     load_end
 } load_e;
 
-menuitem_t LoadMenu[]=
+const menuitem_t LoadMenu[]=
 {
     {1,"", M_LoadSelect,'1'},
     {1,"", M_LoadSelect,'2'},
@@ -462,7 +469,7 @@ menuitem_t LoadMenu[]=
     {1,"", M_LoadSelect,'6'}
 };
 
-menu_t  LoadDef =
+const menu_t  CLoadDef =
 {
     load_end,
     &MainDef,
@@ -471,11 +478,12 @@ menu_t  LoadDef =
     80,54,
     0
 };
+static menu_t LoadDef;
 
 //
 // SAVE GAME MENU
 //
-menuitem_t SaveMenu[]=
+const menuitem_t SaveMenu[]=
 {
     {1,"", M_SaveSelect,'1'},
     {1,"", M_SaveSelect,'2'},
@@ -485,7 +493,7 @@ menuitem_t SaveMenu[]=
     {1,"", M_SaveSelect,'6'}
 };
 
-menu_t  SaveDef =
+const menu_t  CSaveDef =
 {
     load_end,
     &MainDef,
@@ -494,6 +502,7 @@ menu_t  SaveDef =
     80,54,
     0
 };
+static menu_t SaveDef;
 
 
 //
@@ -502,6 +511,7 @@ menu_t  SaveDef =
 //
 void M_ReadSaveStrings(void)
 {
+/*TODO:PAA
     FILE   *handle;
     int     i;
     char    name[256];
@@ -521,6 +531,7 @@ void M_ReadSaveStrings(void)
 	fclose(handle);
 	LoadMenu[i].status = 1;
     }
+*/
 }
 
 
@@ -967,8 +978,7 @@ void M_Episode(int choice)
     if ( (gamemode == registered)
 	 && (choice > 2))
     {
-      fprintf( stderr,
-	       "M_Episode: 4th episode requires UltimateDOOM\n");
+      printf("M_Episode: 4th episode requires UltimateDOOM\n");
       choice = 0;
     }
 	 
@@ -1102,7 +1112,7 @@ void M_FinishReadThis(int choice)
 //
 // M_QuitDOOM
 //
-int     quitsounds[8] =
+const int     quitsounds[8] =
 {
     sfx_pldeth,
     sfx_dmpain,
@@ -1114,7 +1124,7 @@ int     quitsounds[8] =
     sfx_sgtatk
 };
 
-int     quitsounds2[8] =
+const int     quitsounds2[8] =
 {
     sfx_vilact,
     sfx_getpow,
@@ -1152,13 +1162,13 @@ static char *M_SelectEndMessage(void)
     {
         // Doom 1
 
-        endmsg = doom1_endmsg;
+        endmsg = (char **)doom1_endmsg;
     }
     else
     {
         // Doom 2
         
-        endmsg = doom2_endmsg;
+        endmsg = (char **)doom2_endmsg;
     }
 
     return endmsg[gametic % NUM_QUITMESSAGES];
@@ -1745,7 +1755,7 @@ boolean M_Responder (event_t* ev)
 	    usegamma++;
 	    if (usegamma > 4)
 		usegamma = 0;
-	    players[consoleplayer].message = DEH_String(gammamsg[usegamma]);
+	    players[consoleplayer].message = DEH_String((char *)gammamsg[usegamma]);
             I_SetPalette (W_CacheLumpName (DEH_String("PLAYPAL"),PU_CACHE));
 	    return true;
 	}
@@ -2018,7 +2028,7 @@ void M_Drawer (void)
 
     for (i=0;i<max;i++)
     {
-        name = DEH_String(currentMenu->menuitems[i].name);
+        name = DEH_String((char *)currentMenu->menuitems[i].name);
 
 	if (name[0])
 	{
@@ -2030,7 +2040,7 @@ void M_Drawer (void)
     
     // DRAW SKULL
     V_DrawPatchDirect(x + SKULLXOFF, currentMenu->y - 5 + itemOn*LINEHEIGHT,
-		      W_CacheLumpName(DEH_String(skullName[whichSkull]),
+		      W_CacheLumpName(DEH_String((char *)skullName[whichSkull]),
 				      PU_CACHE));
 }
 
@@ -2076,6 +2086,22 @@ void M_Ticker (void)
 //
 void M_Init (void)
 {
+    mouseSensitivity = 5;
+    showMessages = 1;
+    detailLevel = 0;
+    screenblocks = 10;
+
+	// copy menu defs to mutable versions
+	MainDef = CMainDef;
+	EpiDef = CEpiDef;
+	NewDef = CNewDef;
+	OptionsDef = COptionsDef;
+	ReadDef1 = CReadDef1;
+	ReadDef2 = CReadDef2;
+	SoundDef = CSoundDef;
+	LoadDef = CLoadDef;
+	SaveDef = CSaveDef;
+
     currentMenu = &MainDef;
     menuactive = 0;
     itemOn = currentMenu->lastOn;
@@ -2095,10 +2121,12 @@ void M_Init (void)
     {
       case commercial:
         // Commercial has no "read this" entry.
+	/*TODO: PAA
 	MainMenu[readthis] = MainMenu[quitdoom];
 	MainDef.numitems--;
 	MainDef.y += 8;
 	NewDef.prevMenu = &MainDef;
+	*/
 	break;
       case shareware:
 	// Episode 2 and 3 are handled,
@@ -2117,7 +2145,7 @@ void M_Init (void)
     // (should crash if missing).
     if (gameversion < exe_ultimate)
     {
-	EpiDef.numitems--;
+		EpiDef.numitems--;
     }
 
     //opldev = M_CheckParm("-opldev") > 0;
diff --git a/doomgeneric/p_doors.c b/doomgeneric/p_doors.c
index cafab0f..9b9845e 100644
--- a/doomgeneric/p_doors.c
+++ b/doomgeneric/p_doors.c
@@ -437,7 +437,7 @@ EV_VerticalDoor
                 {
                     // This isn't a door OR a plat.  Now we're in trouble.
 
-                    fprintf(stderr, "EV_VerticalDoor: Tried to close "
+                    printf("EV_VerticalDoor: Tried to close "
                                     "something that wasn't a door.\n");
 
                     // Try closing it anyway. At least it will work on 32-bit
diff --git a/doomgeneric/p_enemy.c b/doomgeneric/p_enemy.c
index f2b44d1..8845320 100644
--- a/doomgeneric/p_enemy.c
+++ b/doomgeneric/p_enemy.c
@@ -60,13 +60,13 @@ typedef enum
 //
 // P_NewChaseDir related LUT.
 //
-dirtype_t opposite[] =
+const dirtype_t opposite[] =
 {
   DI_WEST, DI_SOUTHWEST, DI_SOUTH, DI_SOUTHEAST,
   DI_EAST, DI_NORTHEAST, DI_NORTH, DI_NORTHWEST, DI_NODIR
 };
 
-dirtype_t diags[] =
+const dirtype_t diags[] =
 {
     DI_NORTHWEST, DI_NORTHEAST, DI_SOUTHWEST, DI_SOUTHEAST
 };
@@ -254,8 +254,8 @@ boolean P_CheckMissileRange (mobj_t* actor)
 // Move in the current direction,
 // returns false if the move is blocked.
 //
-fixed_t	xspeed[8] = {FRACUNIT,47000,0,-47000,-FRACUNIT,-47000,0,47000};
-fixed_t yspeed[8] = {0,47000,FRACUNIT,47000,0,-47000,-FRACUNIT,-47000};
+const fixed_t xspeed[8] = {FRACUNIT,47000,0,-47000,-FRACUNIT,-47000,0,47000};
+const fixed_t yspeed[8] = {0,47000,FRACUNIT,47000,0,-47000,-FRACUNIT,-47000};
 
 boolean P_Move (mobj_t*	actor)
 {
@@ -1001,7 +1001,7 @@ void A_SkelMissile (mobj_t* actor)
     mo->tracer = actor->target;
 }
 
-int	TRACEANGLE = 0xc000000;
+const int	TRACEANGLE = 0xc000000;
 
 void A_Tracer (mobj_t* actor)
 {
diff --git a/doomgeneric/p_inter.c b/doomgeneric/p_inter.c
index 1eb58cf..878a393 100644
--- a/doomgeneric/p_inter.c
+++ b/doomgeneric/p_inter.c
@@ -47,8 +47,8 @@
 
 // a weapon is found with two clip loads,
 // a big item has five clip loads
-int	maxammo[NUMAMMO] = {200, 50, 300, 50};
-int	clipammo[NUMAMMO] = {10, 4, 20, 1};
+const int	maxammo[NUMAMMO] = {200, 50, 300, 50};
+const int	clipammo[NUMAMMO] = {10, 4, 20, 1};
 
 
 //
diff --git a/doomgeneric/p_local.h b/doomgeneric/p_local.h
index 95fa405..442a3fe 100644
--- a/doomgeneric/p_local.h
+++ b/doomgeneric/p_local.h
@@ -272,8 +272,8 @@ extern mobj_t**		blocklinks;	// for thing chains
 //
 // P_INTER
 //
-extern int		maxammo[NUMAMMO];
-extern int		clipammo[NUMAMMO];
+extern const int		maxammo[NUMAMMO];
+extern const int		clipammo[NUMAMMO];
 
 void
 P_TouchSpecialThing
diff --git a/doomgeneric/p_map.c b/doomgeneric/p_map.c
index e371869..ab4896e 100644
--- a/doomgeneric/p_map.c
+++ b/doomgeneric/p_map.c
@@ -1439,7 +1439,7 @@ static void SpechitOverrun(line_t *ld)
             nofit = addr; 
             break;
         default:
-            fprintf(stderr, "SpechitOverrun: Warning: unable to emulate"
+            printf("SpechitOverrun: Warning: unable to emulate"
                             "an overrun where numspechit=%i\n",
                             numspechit);
             break;
diff --git a/doomgeneric/p_mobj.c b/doomgeneric/p_mobj.c
index a3b9c43..c114f1c 100644
--- a/doomgeneric/p_mobj.c
+++ b/doomgeneric/p_mobj.c
@@ -60,7 +60,7 @@ P_SetMobjState
 	    return false;
 	}
 
-	st = &states[state];
+	st = (state_t *)&states[state];
 	mobj->state = st;
 	mobj->tics = st->tics;
 	mobj->sprite = st->sprite;
@@ -515,7 +515,7 @@ P_SpawnMobj
 	
     mobj = Z_Malloc (sizeof(*mobj), PU_LEVEL, NULL);
     memset (mobj, 0, sizeof (*mobj));
-    info = &mobjinfo[type];
+    info = (mobjinfo_t *)&mobjinfo[type];
 	
     mobj->type = type;
     mobj->info = info;
@@ -532,7 +532,7 @@ P_SpawnMobj
     mobj->lastlook = P_Random () % MAXPLAYERS;
     // do not set the state with P_SetMobjState,
     // because action routines can not be called yet
-    st = &states[info->spawnstate];
+    st = (state_t *)&states[info->spawnstate];
 
     mobj->state = st;
     mobj->tics = st->tics;
diff --git a/doomgeneric/p_pspr.c b/doomgeneric/p_pspr.c
index e4774c7..19b6324 100644
--- a/doomgeneric/p_pspr.c
+++ b/doomgeneric/p_pspr.c
@@ -66,7 +66,7 @@ P_SetPsprite
 	    break;	
 	}
 	
-	state = &states[stnum];
+	state = (state_t *)&states[stnum];
 	psp->state = state;
 	psp->tics = state->tics;	// could be 0
 
diff --git a/doomgeneric/p_saveg.c b/doomgeneric/p_saveg.c
index 5cb8196..fd81f7b 100644
--- a/doomgeneric/p_saveg.c
+++ b/doomgeneric/p_saveg.c
@@ -86,7 +86,7 @@ static byte saveg_read8(void)
     {
         if (!savegame_error)
         {
-            fprintf(stderr, "saveg_read8: Unexpected end of file while "
+            printf("saveg_read8: Unexpected end of file while "
                             "reading save game\n");
 
             savegame_error = true;
@@ -102,7 +102,7 @@ static void saveg_write8(byte value)
     {
         if (!savegame_error)
         {
-            fprintf(stderr, "saveg_write8: Error while writing save game\n");
+            printf("saveg_write8: Error while writing save game\n");
 
             savegame_error = true;
         }
@@ -372,7 +372,7 @@ static void saveg_read_mobj_t(mobj_t *str)
     str->tics = saveg_read32();
 
     // state_t* state;
-    str->state = &states[saveg_read32()];
+    str->state = (state_t *)&states[saveg_read32()];
 
     // int flags;
     str->flags = saveg_read32();
@@ -595,7 +595,7 @@ static void saveg_read_pspdef_t(pspdef_t *str)
 
     if (state > 0)
     {
-        str->state = &states[state];
+        str->state = (state_t *)&states[state];
     }
     else
     {
@@ -1656,7 +1656,7 @@ void P_UnArchiveThinkers (void)
 	    mobj->target = NULL;
             mobj->tracer = NULL;
 	    P_SetThingPosition (mobj);
-	    mobj->info = &mobjinfo[mobj->type];
+	    mobj->info = (mobjinfo_t *)&mobjinfo[mobj->type];
 	    mobj->floorz = mobj->subsector->sector->floorheight;
 	    mobj->ceilingz = mobj->subsector->sector->ceilingheight;
 	    mobj->thinker.function.acp1 = (actionf_p1)P_MobjThinker;
diff --git a/doomgeneric/p_setup.c b/doomgeneric/p_setup.c
index 00306e8..07bae1f 100644
--- a/doomgeneric/p_setup.c
+++ b/doomgeneric/p_setup.c
@@ -691,7 +691,7 @@ static void PadRejectArray(byte *array, unsigned int len)
 
     if (len > sizeof(rejectpad))
     {
-        fprintf(stderr, "PadRejectArray: REJECT lump too short to pad! (%i > %i)\n",
+        printf("PadRejectArray: REJECT lump too short to pad! (%i > %i)\n",
                         len, (int) sizeof(rejectpad));
 
         // Pad remaining space with 0 (or 0xff, if specified on command line).
@@ -748,7 +748,7 @@ P_SetupLevel
   skill_t	skill)
 {
     int		i;
-    char	lumpname[9];
+    char	lumpname[16];
     int		lumpnum;
 	
     totalkills = totalitems = totalsecret = wminfo.maxfrags = 0;
@@ -775,9 +775,9 @@ P_SetupLevel
     if ( gamemode == commercial)
     {
 	if (map<10)
-	    DEH_snprintf(lumpname, 9, "map0%i", map);
+	    DEH_snprintf(lumpname, 16, "map0%i", map);
 	else
-	    DEH_snprintf(lumpname, 9, "map%i", map);
+	    DEH_snprintf(lumpname, 16, "map%i", map);
     }
     else
     {
@@ -848,7 +848,7 @@ void P_Init (void)
 {
     P_InitSwitchList ();
     P_InitPicAnims ();
-    R_InitSprites (sprnames);
+    R_InitSprites ((char **)sprnames);
 }
 
 
diff --git a/doomgeneric/p_spec.c b/doomgeneric/p_spec.c
index 17446b5..8157765 100644
--- a/doomgeneric/p_spec.c
+++ b/doomgeneric/p_spec.c
@@ -93,7 +93,7 @@ extern anim_t*	lastanim;
 //  and end entry, in the order found in
 //  the WAD file.
 //
-animdef_t		animdefs[] =
+const animdef_t		animdefs[] =
 {
     {false,	"NUKAGE3",	"NUKAGE1",	8},
     {false,	"FWATER4",	"FWATER1",	8},
@@ -151,8 +151,8 @@ void P_InitPicAnims (void)
     {
         char *startname, *endname;
 
-        startname = DEH_String(animdefs[i].startname);
-        endname = DEH_String(animdefs[i].endname);
+        startname = DEH_String((char *)animdefs[i].startname);
+        endname = DEH_String((char *)animdefs[i].endname);
 
 	if (animdefs[i].istexture)
 	{
@@ -1178,18 +1178,18 @@ void P_UpdateSpecials (void)
 static void DonutOverrun(fixed_t *s3_floorheight, short *s3_floorpic,
                          line_t *line, sector_t *pillar_sector)
 {
-    static int first = 1;
+    static int hasrun;
     static int tmp_s3_floorheight;
     static int tmp_s3_floorpic;
 
     extern int numflats;
 
-    if (first)
+    if (!hasrun)
     {
         int p;
 
         // This is the first time we have had an overrun.
-        first = 0;
+        hasrun = 1;
 
         // Default values
         tmp_s3_floorheight = DONUT_FLOORHEIGHT_DEFAULT;
@@ -1228,8 +1228,7 @@ static void DonutOverrun(fixed_t *s3_floorheight, short *s3_floorpic,
 
             if (tmp_s3_floorpic >= numflats)
             {
-                fprintf(stderr,
-                        "DonutOverrun: The second parameter for \"-donut\" "
+                printf("DonutOverrun: The second parameter for \"-donut\" "
                         "switch should be greater than 0 and less than number "
                         "of flats (%d). Using default value (%d) instead. \n",
                         numflats, DONUT_FLOORPIC_DEFAULT);
@@ -1238,14 +1237,6 @@ static void DonutOverrun(fixed_t *s3_floorheight, short *s3_floorpic,
         }
     }
 
-    /*
-    fprintf(stderr,
-            "Linedef: %d; Sector: %d; "
-            "New floor height: %d; New floor pic: %d\n",
-            line->iLineID, pillar_sector->iSectorID,
-            tmp_s3_floorheight >> 16, tmp_s3_floorpic);
-     */
-
     *s3_floorheight = (fixed_t) tmp_s3_floorheight;
     *s3_floorpic = (short) tmp_s3_floorpic;
 }
@@ -1290,8 +1281,7 @@ int EV_DoDonut(line_t*	line)
 
         if (s2 == NULL)
         {
-            fprintf(stderr,
-                    "EV_DoDonut: linedef had no second sidedef! "
+            printf( "EV_DoDonut: linedef had no second sidedef! "
                     "Unexpected behavior may occur in Vanilla Doom. \n");
 	    break;
         }
@@ -1311,8 +1301,7 @@ int EV_DoDonut(line_t*	line)
                 // s3->floorpic is a short at 0000:0008
                 // Trying to emulate
 
-                fprintf(stderr,
-                        "EV_DoDonut: WARNING: emulating buffer overrun due to "
+                printf("EV_DoDonut: WARNING: emulating buffer overrun due to "
                         "NULL back sector. "
                         "Unexpected behavior may occur in Vanilla Doom.\n");
 
diff --git a/doomgeneric/p_switch.c b/doomgeneric/p_switch.c
index ed4feec..60f5864 100644
--- a/doomgeneric/p_switch.c
+++ b/doomgeneric/p_switch.c
@@ -39,7 +39,7 @@
 //
 // CHANGE THE TEXTURE OF A WALL SWITCH TO ITS OPPOSITE
 //
-switchlist_t alphSwitchList[] =
+const switchlist_t alphSwitchList[] =
 {
     // Doom shareware episode 1 switches
     {"SW1BRCOM",	"SW2BRCOM",	1},
@@ -135,8 +135,8 @@ void P_InitSwitchList(void)
 	    
 	    value = R_TextureNumForName(alphSwitchList[i].name1);
 #endif
-	    switchlist[index++] = R_TextureNumForName(DEH_String(alphSwitchList[i].name1));
-	    switchlist[index++] = R_TextureNumForName(DEH_String(alphSwitchList[i].name2));
+	    switchlist[index++] = R_TextureNumForName(DEH_String((char *)alphSwitchList[i].name1));
+	    switchlist[index++] = R_TextureNumForName(DEH_String((char *)alphSwitchList[i].name2));
 	}
     }
 }
diff --git a/doomgeneric/r_bsp.c b/doomgeneric/r_bsp.c
index 9a78812..3ebb4e2 100644
--- a/doomgeneric/r_bsp.c
+++ b/doomgeneric/r_bsp.c
@@ -355,7 +355,7 @@ void R_AddLine (seg_t*	line)
 // Returns true
 //  if some part of the bbox might be visible.
 //
-int	checkcoord[12][4] =
+const int	checkcoord[12][4] =
 {
     {3,0,2,1},
     {3,0,2,0},
diff --git a/doomgeneric/r_draw.c b/doomgeneric/r_draw.c
index 9271bcd..21e107e 100644
--- a/doomgeneric/r_draw.c
+++ b/doomgeneric/r_draw.c
@@ -258,7 +258,7 @@ void R_DrawColumnLow (void)
 #define FUZZOFF	(SCREENWIDTH)
 
 
-int	fuzzoffset[FUZZTABLE] =
+const int	fuzzoffset[FUZZTABLE] =
 {
     FUZZOFF,-FUZZOFF,FUZZOFF,-FUZZOFF,FUZZOFF,FUZZOFF,-FUZZOFF,
     FUZZOFF,FUZZOFF,-FUZZOFF,FUZZOFF,FUZZOFF,FUZZOFF,-FUZZOFF,
diff --git a/doomgeneric/r_main.c b/doomgeneric/r_main.c
index 22278fe..bb0fbbd 100644
--- a/doomgeneric/r_main.c
+++ b/doomgeneric/r_main.c
@@ -47,7 +47,7 @@
 int			viewangleoffset;
 
 // increment every time a check is made
-int			validcount = 1;		
+int			validcount;		
 
 
 lighttable_t*		fixedcolormap;
@@ -766,6 +766,7 @@ void R_ExecuteSetViewSize (void)
 
 void R_Init (void)
 {
+    validcount = 1;
     R_InitData ();
     printf (".");
     R_InitPointToAngle ();
diff --git a/doomgeneric/s_sound.c b/doomgeneric/s_sound.c
index f6d8be1..804d79e 100644
--- a/doomgeneric/s_sound.c
+++ b/doomgeneric/s_sound.c
@@ -83,11 +83,11 @@ static channel_t *channels;
 // Maximum volume of a sound effect.
 // Internal default is max out of 0-15.
 
-int sfxVolume = 8;
+int sfxVolume;
 
 // Maximum volume of music. 
 
-int musicVolume = 8;
+int musicVolume;
 
 // Internal volume level, ranging from 0-127
 
@@ -99,11 +99,15 @@ static boolean mus_paused;
 
 // Music currently being played
 
-static musicinfo_t *mus_playing = NULL;
+static musicinfo_t *mus_playing;
 
 // Number of channels to use
 
-int snd_channels = 8;
+int snd_channels;
+
+// PAA: local cache of lump numbers & usefulness, as sfx array is now const
+static int s_lumpnums[NUMSFX+1];
+static int s_usefulness[NUMSFX+1];
 
 //
 // Initializes sound stuff, including volume
@@ -115,7 +119,11 @@ void S_Init(int sfxVolume, int musicVolume)
 {  
     int i;
 
-    I_PrecacheSounds(S_sfx, NUMSFX);
+	S_SoundsInit();
+	sfxVolume = 8;
+	musicVolume = 8;
+	snd_channels = 8;
+    I_PrecacheSounds((sfxinfo_t *)S_sfx, NUMSFX);
 
     S_SetSfxVolume(sfxVolume);
     S_SetMusicVolume(musicVolume);
@@ -137,7 +145,8 @@ void S_Init(int sfxVolume, int musicVolume)
     // Note that sounds have not been cached (yet).
     for (i=1 ; i<NUMSFX ; i++)
     {
-        S_sfx[i].lumpnum = S_sfx[i].usefulness = -1;
+        s_lumpnums[i] = -1;
+		s_usefulness[i] = -1;
     }
 
     I_AtExit(S_Shutdown, true);
@@ -151,7 +160,7 @@ void S_Shutdown(void)
 
 static void S_StopChannel(int cnum)
 {
-    int i;
+    int i, sfx_id;
     channel_t *c;
 
     c = &channels[cnum];
@@ -177,7 +186,8 @@ static void S_StopChannel(int cnum)
         
         // degrade usefulness of sound data
 
-        c->sfxinfo->usefulness--;
+		sfx_id = (c->sfxinfo - S_sfx);	// NB: C99 says ptr diffs are in units of object size
+        s_usefulness[sfx_id]--;
         c->sfxinfo = NULL;
     }
 }
@@ -406,7 +416,7 @@ void S_StartSound(void *origin_p, int sfx_id)
         I_Error("Bad sfx #: %d", sfx_id);
     }
 
-    sfx = &S_sfx[sfx_id];
+    sfx = (sfxinfo_t *)&S_sfx[sfx_id];
 
     // Initialize sound parameters
     if (sfx->link)
@@ -462,14 +472,14 @@ void S_StartSound(void *origin_p, int sfx_id)
     }
 
     // increase the usefulness
-    if (sfx->usefulness++ < 0)
+    if (s_usefulness[sfx_id]++ < 0)
     {
-        sfx->usefulness = 1;
+        s_usefulness[sfx_id] = 1;
     }
 
-    if (sfx->lumpnum < 0)
+    if (s_lumpnums[sfx_id] <= 0)
     {
-        sfx->lumpnum = I_GetSfxLumpNum(sfx);
+        s_lumpnums[sfx_id] = I_GetSfxLumpNum(sfx);
     }
 
     channels[cnum].handle = I_StartSound(sfx, cnum, volume, sep);
@@ -598,6 +608,8 @@ void S_StartMusic(int m_id)
     S_ChangeMusic(m_id, false);
 }
 
+static int m_lumpnums[NUMMUSIC];
+
 void S_ChangeMusic(int musicnum, int looping)
 {
     musicinfo_t *music = NULL;
@@ -619,7 +631,7 @@ void S_ChangeMusic(int musicnum, int looping)
     }
     else
     {
-        music = &S_music[musicnum];
+        music = (musicinfo_t *)&S_music[musicnum];
     }
 
     if (mus_playing == music)
@@ -631,10 +643,10 @@ void S_ChangeMusic(int musicnum, int looping)
     S_StopMusic();
 
     // get lumpnum if neccessary
-    if (!music->lumpnum)
+    if (!m_lumpnums[musicnum])
     {
-        M_snprintf(namebuf, sizeof(namebuf), "d_%s", DEH_String(music->name));
-        music->lumpnum = W_GetNumForName(namebuf);
+        M_snprintf(namebuf, sizeof(namebuf), "d_%s", DEH_String((char *)music->name));
+        m_lumpnums[musicnum] = W_GetNumForName(namebuf);
     }
 
     music->data = W_CacheLumpNum(music->lumpnum, PU_STATIC);
diff --git a/doomgeneric/sounds.c b/doomgeneric/sounds.c
index e976bc8..4fcfa4f 100644
--- a/doomgeneric/sounds.c
+++ b/doomgeneric/sounds.c
@@ -28,80 +28,77 @@
 // Information about all the music
 //
 
-#define MUSIC(name) \
-    { name, 0, NULL, NULL }
-
-musicinfo_t S_music[] =
-{
-    MUSIC(NULL),
-    MUSIC("e1m1"),
-    MUSIC("e1m2"),
-    MUSIC("e1m3"),
-    MUSIC("e1m4"),
-    MUSIC("e1m5"),
-    MUSIC("e1m6"),
-    MUSIC("e1m7"),
-    MUSIC("e1m8"),
-    MUSIC("e1m9"),
-    MUSIC("e2m1"),
-    MUSIC("e2m2"),
-    MUSIC("e2m3"),
-    MUSIC("e2m4"),
-    MUSIC("e2m5"),
-    MUSIC("e2m6"),
-    MUSIC("e2m7"),
-    MUSIC("e2m8"),
-    MUSIC("e2m9"),
-    MUSIC("e3m1"),
-    MUSIC("e3m2"),
-    MUSIC("e3m3"),
-    MUSIC("e3m4"),
-    MUSIC("e3m5"),
-    MUSIC("e3m6"),
-    MUSIC("e3m7"),
-    MUSIC("e3m8"),
-    MUSIC("e3m9"),
-    MUSIC("inter"),
-    MUSIC("intro"),
-    MUSIC("bunny"),
-    MUSIC("victor"),
-    MUSIC("introa"),
-    MUSIC("runnin"),
-    MUSIC("stalks"),
-    MUSIC("countd"),
-    MUSIC("betwee"),
-    MUSIC("doom"),
-    MUSIC("the_da"),
-    MUSIC("shawn"),
-    MUSIC("ddtblu"),
-    MUSIC("in_cit"),
-    MUSIC("dead"),
-    MUSIC("stlks2"),
-    MUSIC("theda2"),
-    MUSIC("doom2"),
-    MUSIC("ddtbl2"),
-    MUSIC("runni2"),
-    MUSIC("dead2"),
-    MUSIC("stlks3"),
-    MUSIC("romero"),
-    MUSIC("shawn2"),
-    MUSIC("messag"),
-    MUSIC("count2"),
-    MUSIC("ddtbl3"),
-    MUSIC("ampie"),
-    MUSIC("theda3"),
-    MUSIC("adrian"),
-    MUSIC("messg2"),
-    MUSIC("romer2"),
-    MUSIC("tense"),
-    MUSIC("shawn3"),
-    MUSIC("openin"),
-    MUSIC("evil"),
-    MUSIC("ultima"),
-    MUSIC("read_m"),
-    MUSIC("dm2ttl"),
-    MUSIC("dm2int") 
+static const char * const S_mnames[] = {
+    NULL,
+    "e1m1",
+    "e1m2",
+    "e1m3",
+    "e1m4",
+    "e1m5",
+    "e1m6",
+    "e1m7",
+    "e1m8",
+    "e1m9",
+    "e2m1",
+    "e2m2",
+    "e2m3",
+    "e2m4",
+    "e2m5",
+    "e2m6",
+    "e2m7",
+    "e2m8",
+    "e2m9",
+    "e3m1",
+    "e3m2",
+    "e3m3",
+    "e3m4",
+    "e3m5",
+    "e3m6",
+    "e3m7",
+    "e3m8",
+    "e3m9",
+    "inter",
+    "intro",
+    "bunny",
+    "victor",
+    "introa",
+    "runnin",
+    "stalks",
+    "countd",
+    "betwee",
+    "doom",
+    "the_da",
+    "shawn",
+    "ddtblu",
+    "in_cit",
+    "dead",
+    "stlks2",
+    "theda2",
+    "doom2",
+    "ddtbl2",
+    "runni2",
+    "dead2",
+    "stlks3",
+    "romero",
+    "shawn2",
+    "messag",
+    "count2",
+    "ddtbl3",
+    "ampie",
+    "theda3",
+    "adrian",
+    "messg2",
+    "romer2",
+    "tense",
+    "shawn3",
+    "openin",
+    "evil",
+    "ultima",
+    "read_m",
+    "dm2ttl",
+    "dm2int" 
 };
+musicinfo_t S_music[sizeof(S_mnames)/sizeof(*S_mnames)];
 
 
 //
@@ -109,11 +106,11 @@ musicinfo_t S_music[] =
 //
 
 #define SOUND(name, priority) \
-  { NULL, name, priority, NULL, -1, -1, 0, 0, -1, NULL }
+  { name, priority, 0, -1, -1 }
 #define SOUND_LINK(name, priority, link_id, pitch, volume) \
-  { NULL, name, priority, &S_sfx[link_id], pitch, volume, 0, 0, -1, NULL }
+  { name, priority, link_id, pitch, volume }
 
-sfxinfo_t S_sfx[] =
+const sfxdata_t S_sfxdata[] =
 {
   // S_sfx[0] needs to be a dummy for odd reasons.
   SOUND("none",   0),
@@ -226,4 +223,21 @@ sfxinfo_t S_sfx[] =
   SOUND("skeatk", 70),
   SOUND("radio",  60),
 };
+sfxinfo_t S_sfx[sizeof(S_sfxdata)/sizeof(*S_sfxdata)];
+
+void S_SoundsInit(void)
+{
+	int i;
+	for (i=0; i<arrlen(S_mnames); i++)
+		S_music[i].name = (char *)S_mnames[i];
+	for (i=0; i<arrlen(S_sfxdata); i++) {
+		int j;
+		for (j=0; j<sizeof(S_sfx[i].name); j++)
+			S_sfx[i].name[j] = S_sfxdata[i].name[j];
+		S_sfx[i].priority = S_sfxdata[i].priority;
+		S_sfx[i].link = &S_sfx[S_sfxdata[i].link_id];
+		S_sfx[i].pitch = S_sfxdata[i].pitch;
+		S_sfx[i].volume = S_sfxdata[i].volume;
+	}
+}
 
diff --git a/doomgeneric/sounds.h b/doomgeneric/sounds.h
index 1e8afc4..f6b8332 100644
--- a/doomgeneric/sounds.h
+++ b/doomgeneric/sounds.h
@@ -224,4 +224,6 @@ typedef enum
     NUMSFX
 } sfxenum_t;
 
+extern void S_SoundsInit(void);
+
 #endif
diff --git a/doomgeneric/st_stuff.c b/doomgeneric/st_stuff.c
index e25accc..d06b209 100644
--- a/doomgeneric/st_stuff.c
+++ b/doomgeneric/st_stuff.c
@@ -275,7 +275,7 @@ static int		lu_palette;
 static unsigned int	st_clock;
 
 // used for making messages go away
-static int		st_msgcounter=0;
+static int		st_msgcounter;
 
 // used when in chat 
 static st_chatstateenum_t	st_chatstate;
@@ -368,16 +368,16 @@ static st_number_t	w_maxammo[4];
 static int	st_fragscount;
 
 // used to use appopriately pained face
-static int	st_oldhealth = -1;
+static int	st_oldhealth;
 
 // used for evil grin
 static boolean	oldweaponsowned[NUMWEAPONS]; 
 
  // count until face changes
-static int	st_facecount = 0;
+static int	st_facecount;
 
 // current face index, used by w_faces
-static int	st_faceindex = 0;
+static int	st_faceindex;
 
 // holds key-type for each key box on bar
 static int	keyboxes[3]; 
@@ -385,14 +385,14 @@ static int	keyboxes[3];
 // a random number per tick
 static int	st_randomnumber;  
 
-cheatseq_t cheat_mus = CHEAT("idmus", 2);
-cheatseq_t cheat_god = CHEAT("iddqd", 0);
-cheatseq_t cheat_ammo = CHEAT("idkfa", 0);
-cheatseq_t cheat_ammonokey = CHEAT("idfa", 0);
-cheatseq_t cheat_noclip = CHEAT("idspispopd", 0);
-cheatseq_t cheat_commercial_noclip = CHEAT("idclip", 0);
+const cheatseq_t cheat_mus = CHEAT("idmus", 2);
+const cheatseq_t cheat_god = CHEAT("iddqd", 0);
+const cheatseq_t cheat_ammo = CHEAT("idkfa", 0);
+const cheatseq_t cheat_ammonokey = CHEAT("idfa", 0);
+const cheatseq_t cheat_noclip = CHEAT("idspispopd", 0);
+const cheatseq_t cheat_commercial_noclip = CHEAT("idclip", 0);
 
-cheatseq_t	cheat_powerup[7] =
+const cheatseq_t	cheat_powerup[7] =
 {
     CHEAT("idbeholdv", 0),
     CHEAT("idbeholds", 0),
@@ -403,9 +403,9 @@ cheatseq_t	cheat_powerup[7] =
     CHEAT("idbehold", 0),
 };
 
-cheatseq_t cheat_choppers = CHEAT("idchoppers", 0);
-cheatseq_t cheat_clev = CHEAT("idclev", 2);
-cheatseq_t cheat_mypos = CHEAT("idmypos", 0);
+const cheatseq_t cheat_choppers = CHEAT("idchoppers", 0);
+const cheatseq_t cheat_clev = CHEAT("idclev", 2);
+const cheatseq_t cheat_mypos = CHEAT("idmypos", 0);
 
 
 //
@@ -452,7 +452,6 @@ ST_Responder (event_t* ev)
 	break;
 	
       case AM_MSGEXITED:
-	//	fprintf(stderr, "AM exited\n");
 	st_gamestate = FirstPersonState;
 	break;
     }
@@ -666,7 +665,7 @@ int ST_calcPainOffset(void)
 {
     int		health;
     static int	lastcalc;
-    static int	oldhealth = -1;
+    static int	oldhealth;
     
     health = plyr->health > 100 ? 100 : plyr->health;
 
@@ -690,10 +689,15 @@ void ST_updateFaceWidget(void)
     int		i;
     angle_t	badguyangle;
     angle_t	diffang;
-    static int	lastattackdown = -1;
-    static int	priority = 0;
+    static boolean hasrun;
+    static int	lastattackdown;
+    static int	priority;
     boolean	doevilgrin;
 
+    if (!hasrun) {
+        hasrun = true;
+        lastattackdown = -1;
+    }
     if (priority < 10)
     {
 	// dead
@@ -859,8 +863,13 @@ void ST_updateFaceWidget(void)
 
 void ST_updateWidgets(void)
 {
-    static int	largeammo = 1994; // means "n/a"
+    static boolean hasrun;
+    static int	largeammo;
     int		i;
+    if (!hasrun) {
+        hasrun = true;
+        largeammo = 1994; // means "n/a"
+    }
 
     // must redirect the pointer if the ready weapon has changed.
     //  if (w_ready.data != plyr->readyweapon)
@@ -931,7 +940,7 @@ void ST_Ticker (void)
 
 }
 
-static int st_palette = 0;
+static int st_palette;
 
 void ST_doPaletteStuff(void)
 {
@@ -1383,33 +1392,34 @@ void ST_createWidgets(void)
 
 }
 
-static boolean	st_stopped = true;
+static boolean	st_hasrun;
 
 
 void ST_Start (void)
 {
 
-    if (!st_stopped)
+    if (st_hasrun)
 	ST_Stop();
 
     ST_initData();
     ST_createWidgets();
-    st_stopped = false;
+    st_hasrun = true;
 
 }
 
 void ST_Stop (void)
 {
-    if (st_stopped)
+    if (!st_hasrun)
 	return;
 
     I_SetPalette (W_CacheLumpNum (lu_palette, PU_CACHE));
 
-    st_stopped = true;
+    st_hasrun = false;
 }
 
 void ST_Init (void)
 {
+    st_oldhealth = -1;
     ST_loadData();
     st_backing_screen = (byte *) Z_Malloc(ST_WIDTH * ST_HEIGHT, PU_STATIC, 0);
 }
diff --git a/doomgeneric/st_stuff.h b/doomgeneric/st_stuff.h
index 8ed53e4..3a857e1 100644
--- a/doomgeneric/st_stuff.h
+++ b/doomgeneric/st_stuff.h
@@ -74,16 +74,16 @@ typedef enum
 
 
 extern byte *st_backing_screen;
-extern cheatseq_t cheat_mus;
-extern cheatseq_t cheat_god;
-extern cheatseq_t cheat_ammo;
-extern cheatseq_t cheat_ammonokey;
-extern cheatseq_t cheat_noclip;
-extern cheatseq_t cheat_commercial_noclip;
-extern cheatseq_t cheat_powerup[7];
-extern cheatseq_t cheat_choppers;
-extern cheatseq_t cheat_clev;
-extern cheatseq_t cheat_mypos;
+extern const cheatseq_t cheat_mus;
+extern const cheatseq_t cheat_god;
+extern const cheatseq_t cheat_ammo;
+extern const cheatseq_t cheat_ammonokey;
+extern const cheatseq_t cheat_noclip;
+extern const cheatseq_t cheat_commercial_noclip;
+extern const cheatseq_t cheat_powerup[7];
+extern const cheatseq_t cheat_choppers;
+extern const cheatseq_t cheat_clev;
+extern const cheatseq_t cheat_mypos;
 
 
 #endif
diff --git a/doomgeneric/statdump.c b/doomgeneric/statdump.c
index 7afe3f3..09057d8 100644
--- a/doomgeneric/statdump.c
+++ b/doomgeneric/statdump.c
@@ -29,6 +29,7 @@
 
 #include "statdump.h"
 
+#if ORIGCODE
 /* Par times for E1M1-E1M9. */
 static const int doom1_par_times[] =
 {
@@ -41,8 +42,6 @@ static const int doom2_par_times[] =
     30, 90, 120, 120, 90, 150, 120, 120, 270,
 };
 
-#if ORIGCODE
-
 /* Player colors. */
 static const char *player_colors[] =
 {
diff --git a/doomgeneric/tables.c b/doomgeneric/tables.c
index c221e9a..dd8537d 100644
--- a/doomgeneric/tables.c
+++ b/doomgeneric/tables.c
@@ -1862,7 +1862,7 @@ const int finesine[10240] =
     65534,65535,65535,65535,65535,65535,65535,65535
 };
 
-const fixed_t *finecosine = &finesine[FINEANGLES/4];
+const fixed_t * const finecosine = &finesine[FINEANGLES/4];
 
 const angle_t tantoangle[2049] =
 {
diff --git a/doomgeneric/tables.h b/doomgeneric/tables.h
index 495fd53..cde0ee0 100644
--- a/doomgeneric/tables.h
+++ b/doomgeneric/tables.h
@@ -49,7 +49,7 @@
 extern const fixed_t finesine[5*FINEANGLES/4];
 
 // Re-use data, is just PI/2 pahse shift.
-extern const fixed_t *finecosine;
+extern const fixed_t * const finecosine;
 
 
 // Effective size is 4096.
diff --git a/doomgeneric/w_file_stdc.c b/doomgeneric/w_file_stdc.c
index 829e960..9385590 100644
--- a/doomgeneric/w_file_stdc.c
+++ b/doomgeneric/w_file_stdc.c
@@ -28,7 +28,7 @@ typedef struct
     FILE *fstream;
 } stdc_wad_file_t;
 
-extern wad_file_class_t stdc_wad_file;
+extern const wad_file_class_t stdc_wad_file;
 
 static wad_file_t *W_StdC_OpenFile(char *path)
 {
@@ -45,7 +45,7 @@ static wad_file_t *W_StdC_OpenFile(char *path)
     // Create a new stdc_wad_file_t to hold the file handle.
 
     result = Z_Malloc(sizeof(stdc_wad_file_t), PU_STATIC, 0);
-    result->wad.file_class = &stdc_wad_file;
+    result->wad.file_class = (wad_file_class_t *)&stdc_wad_file;
     result->wad.mapped = NULL;
     result->wad.length = M_FileLength(fstream);
     result->fstream = fstream;
@@ -66,7 +66,7 @@ static void W_StdC_CloseFile(wad_file_t *wad)
 // Read data from the specified position in the file into the 
 // provided buffer.  Returns the number of bytes read.
 
-size_t W_StdC_Read(wad_file_t *wad, unsigned int offset,
+static size_t W_StdC_Read(wad_file_t *wad, unsigned int offset,
                    void *buffer, size_t buffer_len)
 {
     stdc_wad_file_t *stdc_wad;
@@ -86,7 +86,7 @@ size_t W_StdC_Read(wad_file_t *wad, unsigned int offset,
 }
 
 
-wad_file_class_t stdc_wad_file = 
+const wad_file_class_t stdc_wad_file = 
 {
     W_StdC_OpenFile,
     W_StdC_CloseFile,
diff --git a/doomgeneric/wi_stuff.c b/doomgeneric/wi_stuff.c
index ddb9a66..d74f67f 100644
--- a/doomgeneric/wi_stuff.c
+++ b/doomgeneric/wi_stuff.c
@@ -149,6 +149,10 @@ typedef struct
     // LEVEL: n/a
     int		data2; 
 
+} anim_t;
+
+typedef struct
+{
     // actual graphics for frames of animations
     patch_t*	p[3]; 
 
@@ -166,10 +170,10 @@ typedef struct
     // used by RANDOM and LEVEL when animating
     int		state;  
 
-} anim_t;
+} anim_state_t;
 
 
-static point_t lnodes[NUMEPISODES][NUMMAPS] =
+static const point_t lnodes[NUMEPISODES][NUMMAPS] =
 {
     // Episode 0 World Map
     {
@@ -219,56 +223,56 @@ static point_t lnodes[NUMEPISODES][NUMMAPS] =
 //  as they replace 320x200 full screen frames.
 //
 
-#define ANIM(type, period, nanims, x, y, nexttic)            \
-   { (type), (period), (nanims), { (x), (y) }, (nexttic),    \
-     0, { NULL, NULL, NULL }, 0, 0, 0, 0 }
+#define ANIM(type, period, nanims, x, y)            \
+   { (type), (period), (nanims), { (x), (y) } }
 
 
-static anim_t epsd0animinfo[] =
+static const anim_t epsd0animinfo[] =
 {
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 224, 104, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 184, 160, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 112, 136, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 72, 112, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 88, 96, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 64, 48, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 192, 40, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 136, 16, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 80, 16, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 64, 24, 0),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 224, 104),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 184, 160),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 112, 136),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 72, 112),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 88, 96),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 64, 48),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 192, 40),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 136, 16),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 80, 16),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 64, 24),
 };
 
-static anim_t epsd1animinfo[] =
+static const anim_t epsd1animinfo[] =
 {
-    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136, 1),
-    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136, 2),
-    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136, 3),
-    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136, 4),
-    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136, 5),
-    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136, 6),
-    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136, 7),
-    ANIM(ANIM_LEVEL, TICRATE/3, 3, 192, 144, 8),
-    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136, 8),
+    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136),
+    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136),
+    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136),
+    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136),
+    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136),
+    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136),
+    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136),
+    ANIM(ANIM_LEVEL, TICRATE/3, 3, 192, 144),
+    ANIM(ANIM_LEVEL, TICRATE/3, 1, 128, 136),
 };
 
-static anim_t epsd2animinfo[] =
+static const anim_t epsd2animinfo[] =
 {
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 104, 168, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 40, 136, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 160, 96, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 104, 80, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 120, 32, 0),
-    ANIM(ANIM_ALWAYS, TICRATE/4, 3, 40, 0, 0),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 104, 168),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 40, 136),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 160, 96),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 104, 80),
+    ANIM(ANIM_ALWAYS, TICRATE/3, 3, 120, 32),
+    ANIM(ANIM_ALWAYS, TICRATE/4, 3, 40, 0),
 };
 
-static int NUMANIMS[NUMEPISODES] =
+static const int NUMANIMS[NUMEPISODES] =
 {
     arrlen(epsd0animinfo),
     arrlen(epsd1animinfo),
     arrlen(epsd2animinfo),
 };
+#define MAXANIMS	10
 
-static anim_t *anims[NUMEPISODES] =
+static const anim_t * const anims[NUMEPISODES] =
 {
     epsd0animinfo,
     epsd1animinfo,
@@ -338,10 +342,10 @@ static int		NUMCMAPS;
 //
 
 // You Are Here graphic
-static patch_t*		yah[3] = { NULL, NULL, NULL }; 
+static patch_t*		yah[3];
 
 // splat
-static patch_t*		splat[2] = { NULL, NULL };
+static patch_t*		splat[2];
 
 // %, : graphics
 static patch_t*		percent;
@@ -516,10 +520,14 @@ WI_drawOnLnode
 
 
 
+// local animation state, now structures are const
+static anim_state_t an_state[NUMEPISODES][MAXANIMS];
+
 void WI_initAnimatedBack(void)
 {
     int		i;
-    anim_t*	a;
+    const anim_t*	a;
+    anim_state_t*	s;
 
     if (gamemode == commercial)
 	return;
@@ -530,17 +538,18 @@ void WI_initAnimatedBack(void)
     for (i=0;i<NUMANIMS[wbs->epsd];i++)
     {
 	a = &anims[wbs->epsd][i];
+    s = &an_state[wbs->epsd][i];
 
 	// init variables
-	a->ctr = -1;
+	s->ctr = -1;
 
 	// specify the next time to draw it
 	if (a->type == ANIM_ALWAYS)
-	    a->nexttic = bcnt + 1 + (M_Random()%a->period);
+	    s->nexttic = bcnt + 1 + (M_Random()%a->period);
 	else if (a->type == ANIM_RANDOM)
-	    a->nexttic = bcnt + 1 + a->data2+(M_Random()%a->data1);
+	    s->nexttic = bcnt + 1 + a->data2+(M_Random()%a->data1);
 	else if (a->type == ANIM_LEVEL)
-	    a->nexttic = bcnt + 1;
+	    s->nexttic = bcnt + 1;
     }
 
 }
@@ -548,7 +557,8 @@ void WI_initAnimatedBack(void)
 void WI_updateAnimatedBack(void)
 {
     int		i;
-    anim_t*	a;
+    const anim_t*	a;
+    anim_state_t*       s;
 
     if (gamemode == commercial)
 	return;
@@ -559,24 +569,25 @@ void WI_updateAnimatedBack(void)
     for (i=0;i<NUMANIMS[wbs->epsd];i++)
     {
 	a = &anims[wbs->epsd][i];
+        s = &an_state[wbs->epsd][i];
 
-	if (bcnt == a->nexttic)
+	if (bcnt == s->nexttic)
 	{
 	    switch (a->type)
 	    {
 	      case ANIM_ALWAYS:
-		if (++a->ctr >= a->nanims) a->ctr = 0;
-		a->nexttic = bcnt + a->period;
+		if (++s->ctr >= a->nanims) s->ctr = 0;
+		s->nexttic = bcnt + a->period;
 		break;
 
 	      case ANIM_RANDOM:
-		a->ctr++;
-		if (a->ctr == a->nanims)
+		s->ctr++;
+		if (s->ctr == a->nanims)
 		{
-		    a->ctr = -1;
-		    a->nexttic = bcnt+a->data2+(M_Random()%a->data1);
+		    s->ctr = -1;
+		    s->nexttic = bcnt+a->data2+(M_Random()%a->data1);
 		}
-		else a->nexttic = bcnt + a->period;
+		else s->nexttic = bcnt + a->period;
 		break;
 		
 	      case ANIM_LEVEL:
@@ -584,9 +595,9 @@ void WI_updateAnimatedBack(void)
 		if (!(state == StatCount && i == 7)
 		    && wbs->next == a->data1)
 		{
-		    a->ctr++;
-		    if (a->ctr == a->nanims) a->ctr--;
-		    a->nexttic = bcnt + a->period;
+		    s->ctr++;
+		    if (s->ctr == a->nanims) s->ctr--;
+		    s->nexttic = bcnt + a->period;
 		}
 		break;
 	    }
@@ -599,7 +610,8 @@ void WI_updateAnimatedBack(void)
 void WI_drawAnimatedBack(void)
 {
     int			i;
-    anim_t*		a;
+    const anim_t*	a;
+    anim_state_t*       s;
 
     if (gamemode == commercial)
 	return;
@@ -610,9 +622,11 @@ void WI_drawAnimatedBack(void)
     for (i=0 ; i<NUMANIMS[wbs->epsd] ; i++)
     {
 	a = &anims[wbs->epsd][i];
+	s = &an_state[wbs->epsd][i];
 
-	if (a->ctr >= 0)
-	    V_DrawPatch(a->loc.x, a->loc.y, a->p[a->ctr]);
+	if (s->ctr >= 0) {
+	    V_DrawPatch(a->loc.x, a->loc.y, s->p[s->ctr]);
+	}
     }
 
 }
@@ -766,7 +780,7 @@ void WI_updateNoState(void) {
 
 }
 
-static boolean		snl_pointeron = false;
+static boolean		snl_pointeron;
 
 
 void WI_initShowNextLoc(void)
@@ -1554,14 +1568,15 @@ typedef void (*load_callback_t)(char *lumpname, patch_t **variable);
 static void WI_loadUnloadData(load_callback_t callback)
 {
     int i, j;
-    char name[9];
-    anim_t *a;
+    char name[40];
+    const anim_t *a;
+    anim_state_t *s;
 
     if (gamemode == commercial)
     {
 	for (i=0 ; i<NUMCMAPS ; i++)
 	{
-	    DEH_snprintf(name, 9, "CWILV%2.2d", i);
+	    DEH_snprintf(name, 16, "CWILV%2.2d", i);
             callback(name, &lnames[i]);
 	}
     }
@@ -1569,7 +1584,7 @@ static void WI_loadUnloadData(load_callback_t callback)
     {
 	for (i=0 ; i<NUMMAPS ; i++)
 	{
-	    DEH_snprintf(name, 9, "WILV%d%d", wbs->epsd, i);
+	    DEH_snprintf(name, 16, "WILV%d%d", wbs->epsd, i);
             callback(name, &lnames[i]);
 	}
 
@@ -1587,19 +1602,20 @@ static void WI_loadUnloadData(load_callback_t callback)
 	    for (j=0;j<NUMANIMS[wbs->epsd];j++)
 	    {
 		a = &anims[wbs->epsd][j];
+                s = &an_state[wbs->epsd][j];
 		for (i=0;i<a->nanims;i++)
 		{
 		    // MONDO HACK!
 		    if (wbs->epsd != 1 || j != 8)
 		    {
 			// animations
-			DEH_snprintf(name, 9, "WIA%d%.2d%.2d", wbs->epsd, j, i);
-                        callback(name, &a->p[i]);
+			DEH_snprintf(name, 35, "WIA%d%.2d%.2d", wbs->epsd, j, i);
+                        callback(name, &s->p[i]);
 		    }
 		    else
 		    {
 			// HACK ALERT!
-			a->p[i] = anims[1][4].p[i];
+			s->p[i] = an_state[1][4].p[i];
 		    }
 		}
 	    }
@@ -1612,7 +1628,7 @@ static void WI_loadUnloadData(load_callback_t callback)
     for (i=0;i<10;i++)
     {
 	 // numbers 0-9
-	DEH_snprintf(name, 9, "WINUM%d", i);
+	DEH_snprintf(name, 16, "WINUM%d", i);
         callback(name, &num[i]);
     }
 
@@ -1673,11 +1689,11 @@ static void WI_loadUnloadData(load_callback_t callback)
     for (i=0 ; i<MAXPLAYERS ; i++)
     {
 	// "1,2,3,4"
-	DEH_snprintf(name, 9, "STPB%d", i);
+	DEH_snprintf(name, 16, "STPB%d", i);
         callback(name, &p[i]);
 
 	// "1,2,3,4"
-	DEH_snprintf(name, 9, "WIBP%d", i+1);
+	DEH_snprintf(name, 16, "WIBP%d", i+1);
         callback(name, &bp[i]);
     }
 
