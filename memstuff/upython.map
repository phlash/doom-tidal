# Memory map of uPython once loaded..

ESP32S3 address regions (<esp-idf>/components/soc/esp32s3/include/soc/[soc.h,cache_memory.h]),
also 'esp32-s3_technical_reference_manual_en.pdf' (for cache in SRAM details):
	0x0000-0000 -> 0x3C00-0000				# reserved
	0x3C00-0000 -> 0x3E00-0000				# DBus shared MMU virtual address space (32MiB):	unpopulated until MMU config
	0x3E00-0000 -> 0x3FC8-0000				# reserved
	0x3FC8-0000 -> 0x3FC8-8000				# reserved (DBus cache alias of IBus cache)
	0x3FC8-8000 -> 0x3FCF-0000				# Dbus -> shared SRAM address space (512-32-64kiB: 416kiB)
	0x3FCF-0000 -> 0x3FD0-0000				# DBus cache SRAM (64kiB)
	0x3FD0-0000 -> 0x3FF0-0000				# reserved
	0x3FF0-0000 -> 0x3FF2-0000				# DBus -> ESPROM access (/top/ 128kiB):	entropy: espdrom.raw.png
	0x3FF2-0000 -> 0x4000-0000				# reserved

	0x4000-0000 -> 0x4006-0000				# IBus -> ESPROM access (all 384kiB):		entropy: espirom.raw.png
	0x4006-0000 -> 0x4037-0000				# reserved
	0x4037-0000 -> 0x4037-8000				# Ibus cache SRAM (32kiB)
	0x4037-8000 -> 0x403E-0000				# IBus -> shared SRAM address space (512-32-64kiB: 416kiB)
	0x403E-0000 -> 0x403F-0000				# reserved (IBus cache alias of DBus cache)
	0x403F-0000 -> 0x4200-0000				# reserved
	0x4200-0000 -> 0x4400-0000				# IBus shared MMU virtual address space (32MiB):	unpopulated until MMU config
	0x4400-0000 -> 0x5000-0000				# reserved
	0x5000-0000 -> 0x5000-2000				# RTC slow RAM (8kiB) DBus & IBus mapped
	0x5000-2000 -> 0x6000-0000				# reserved
	0x6000-0000 -> 0x600E-0000				# peripheral address space (896kiB) DBus & IBus mapped
	0x600F-E000 -> 0x6010-0000				# RTC fast RAM (8kiB) DBus & IBus mapped
	0x6010-0000 -> 0xFFFF-FFFF				# reserved

MMU page tables map external ROM/RAM pages into /both/ IBus and DBus address spaces (at the same offset)
MMU page table entries have a specific bit (15, 0x8000) to map SPIRAM instead of flash ROM
By convention, SPIRAM is mapped at the /top/ of the address space (0x3D800000-0x3E000000)

ESP32S3 MMU page table (as above, plus mmu.h):
	0x600C-5000 -> 0x600C-5800				# MMU page table registers (one 32bit entry per page, 512 entries)

	pages are 64kiB (0x10000) in size, thus 512 pages allows 32MiB to be mapped at any one time to both buses.
	each page table entry (aka slot) corresponds to a specific virtual address (space start + 0x10000*page)


micropython.bin (from OTA_0 partition offset):
	offset: 0x10000
	chip: 233
	segs: 7
	ftype:2
	fszsp:0x3f
	entry: 0x403768bc
	0: off=10020 load=3c110020 size=92240	# pages 0x1-0xa, should be DROM but mapped into IBus space?
	1: off=a2268 load=3fc99020 size=3f80	# DRAM (.data + .bss)
	2: off=a61f0 load=40374000 size=9e28	# IRAM (/overlaps/ DBus cache by 16kiB?) GOT + entry point?
	3: off=b0020 load=42000020 size=1056c4	# pages 0xb-0x1b mapped into IROM, majority of code
	4: off=1b56ec load=4037de28 size=b1f4	# IRAM (directly after segment 2) not sure why separated?
	5: off=1c08e8 load=50000000 size=818	# RTC slow RAM (D+I) not sure why used
	6: off=1c1108 load=600fe000 size=28		# RTC fast RAM (D+I) not sure why used


annotated page table dump from running uPython:
	0 <-- irom --> 11 <-- drom --> 100
	0: b	# IBus mapping of main code to 0x4200-0000
	1: c
	2: d
	3: e
	4: f
	5: 10
	6: 11
	7: 12
	8: 13
	9: 14
	a: 15
	b: 16
	c: 17
	d: 18
	e: 19
	f: 1a
	10: 1b
	11: 1	# DBus mapping of rodata to 0x3c11-0000
	12: 2
	13: 3
	14: 4
	15: 5
	16: 6
	17: 7
	18: 8
	19: 9
	1a: a
	1b: 4000
	<...invalid [0x4000] until>
	180: 8000	# PSRAM mapping (top bit set) to 0x3D80-0000 -> 0x3E00-0000
	181: 8001
	182: 8002
	...
	1fe: 807e
	1ff: 807f


So where to put DOOM?:
	MMU pages are used up to 0x1b, OTA_1 partition is @ offset 0x210000, so it's tidy and
	well clear of uPython if I link with:
	- .text =>   0x42210000 (actually 0x42210020 to account for .bin file headers)
	- .rodata => 0x3c250000 (doom has ~4 pages of code, and again actually 0x3c250020)

	DRAM is all occupied by uPython heap (if I'm reading the startup code right), so this
	is my challenge - find a way to reserve space in SPIRAM that is always available..
	- malloc() a huge blob that will always end up in SPIRAM, forcing GC to clean up and
	  ensuring it covers where I chose to set .data base address
	  This appears feasible - malloc'ing 7MiB reliably returns 0x3D850000(ish), so I can
	  link doom with .data+.bss => 0x3d900000, and having malloc'ed a large blob, realloc
	  it back to 1MiB, leaving the rest free for more allocation..
